++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-sort-debug-keys.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-sort-debug-keys.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-sort-debug-keys.sh.VKw1
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-sort-debug-keys.sh.VKw1
++++ ls -dgo /sources/coreutils-8.30/gt-sort-debug-keys.sh.VKw1
+++ perms='drwx------ 2 4096 Nov 26 23:49 /sources/coreutils-8.30/gt-sort-debug-keys.sh.VKw1'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-sort-debug-keys.sh.VKw1
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-sort-debug-keys.sh.VKw1
++ cd /sources/coreutils-8.30/gt-sort-debug-keys.sh.VKw1
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ sort printf
+ require_built_ sort printf
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env sort --version
sort (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Mike Haertel and Paul Eggert.
+ for i in $*
+ env printf --version
printf (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by David MacKenzie.
+ cat
+ for type in n h g
+ printf '1\n\n44\n33\n2\n'
+ sort -s -k2n --debug
sort: using simple byte comparison
sort: key 1 is numeric and spans multiple fields
+ printf '1\n\n44\n33\n2\n'
+ sort -s -k1.3n --debug
sort: using simple byte comparison
sort: leading blanks are significant in key 1; consider also specifying 'b'
sort: key 1 is numeric and spans multiple fields
+ printf '1\n\n44\n33\n2\n'
+ sort -s -k1n --debug
sort: using simple byte comparison
sort: key 1 is numeric and spans multiple fields
+ printf '2\n\n1\n'
+ number
+ sort -s -k2g --debug
+ cat -n
+ sed 's/^ *//'
sort: using simple byte comparison
sort: key 1 is numeric and spans multiple fields
+ for type in n h g
+ printf '1\n\n44\n33\n2\n'
+ sort -s -k2h --debug
sort: using simple byte comparison
sort: key 1 is numeric and spans multiple fields
+ printf '1\n\n44\n33\n2\n'
+ sort -s -k1.3h --debug
sort: using simple byte comparison
sort: leading blanks are significant in key 1; consider also specifying 'b'
sort: key 1 is numeric and spans multiple fields
+ printf '1\n\n44\n33\n2\n'
+ sort -s -k1h --debug
sort: using simple byte comparison
sort: key 1 is numeric and spans multiple fields
+ printf '2\n\n1\n'
+ number
+ sort -s -k2g --debug
+ cat -n
+ sed 's/^ *//'
sort: using simple byte comparison
sort: key 1 is numeric and spans multiple fields
+ for type in n h g
+ printf '1\n\n44\n33\n2\n'
+ sort -s -k2g --debug
sort: using simple byte comparison
sort: key 1 is numeric and spans multiple fields
+ sort -s -k1.3g --debug
+ printf '1\n\n44\n33\n2\n'
sort: using simple byte comparison
sort: leading blanks are significant in key 1; consider also specifying 'b'
sort: key 1 is numeric and spans multiple fields
+ sort -s -k1g --debug
+ printf '1\n\n44\n33\n2\n'
sort: using simple byte comparison
sort: key 1 is numeric and spans multiple fields
+ printf '2\n\n1\n'
+ number
+ sort -s -k2g --debug
+ cat -n
+ sed 's/^ *//'
sort: using simple byte comparison
sort: key 1 is numeric and spans multiple fields
+ printf 'FEB\n\nJAN\n'
+ sort -s -k1M --debug
sort: using simple byte comparison
+ printf 'FEB\n\nJAN\n'
+ sort -s -k2,2M --debug
sort: using simple byte comparison
+ printf 'FEB\nJAZZ\n\nJAN\n'
+ sort -s -k1M --debug
sort: using simple byte comparison
+ number
+ printf 'FEB\nJAZZ\n\nJAN\n'
+ sort -s -k2,2M --debug
+ cat -n
+ sed 's/^ *//'
sort: using simple byte comparison
+ printf 'FEB\nJANZ\n\nJAN\n'
+ sort -s -k1M --debug
sort: using simple byte comparison
+ printf 'FEB\nJANZ\n\nJAN\n'
+ number
+ sort -s -k2,2M --debug
+ cat -n
+ sed 's/^ *//'
sort: using simple byte comparison
+ printf ' 1.2ignore\n 1.1e4ignore\n'
+ sort -s -g --debug
sort: using simple byte comparison
+ printf '\tb\n\t\ta\n'
+ sort -s -d --debug
sort: using simple byte comparison
+ printf 'a\n\n'
+ sort -s -k2,2 --debug
sort: using simple byte comparison
sort: leading blanks are significant in key 1; consider also specifying 'b'
+ printf 'b\na\n'
+ sort -s -k1 --debug
sort: using simple byte comparison
sort: leading blanks are significant in key 1; consider also specifying 'b'
+ printf -- '-0\n1\n-2\n--Mi-1\n-3\n-0\n'
+ sort -s --debug -k1,1h
sort: using simple byte comparison
+ printf ' 1\n1\n'
+ sort -b --debug
sort: using simple byte comparison
+ printf ' 1\n1\n'
+ sort -sb --debug
sort: using simple byte comparison
+ printf ' 1\n1\n'
+ sort --debug
sort: using simple byte comparison
+ printf '2,5\n2.4\n'
+ sort -s -k1n --debug
sort: using simple byte comparison
sort: key 1 is numeric and spans multiple fields
+ printf '2.,,3\n2.4\n'
+ sort -s -k1n --debug
sort: using simple byte comparison
sort: key 1 is numeric and spans multiple fields
+ printf '2,,3\n2.4\n'
+ sort -s -k1n --debug
sort: using simple byte comparison
sort: key 1 is numeric and spans multiple fields
+ env printf '1a\x002b\x00'
+ sort -s -n -z --debug
sort: using simple byte comparison
+ printf '\0\ta\n'
+ sort -s -k2b,2 --debug
+ tr -d '\0'
sort: using simple byte comparison
+ printf 'A\tchr10\nB\tchr1\n'
+ sort -s -k2.4b,2.3n --debug
sort: using simple byte comparison
sort: leading blanks are significant in key 1; consider also specifying 'b'
+ printf '1 2\n1 3\n'
+ sort -s -k1.2b --debug
sort: using simple byte comparison
+ compare exp out
+ compare_dev_null_ exp out
+ test 2 = 2
+ test xexp = x/dev/null
+ test xout = x/dev/null
+ return 2
+ case $? in
+ compare_ exp out
+ diff -u exp out
+ cat
+ unset LC_ALL
+ f=fr_FR.UTF-8
+ : fr_FR.UTF-8
+ test fr_FR.UTF-8 '!=' none
+ sed 's/^^ .*/^ no match for key/'
+ echo '   1²---++3   1,234  Mi'
+ LC_ALL=C
+ sort --debug -k2g -k1b,1
sort: using simple byte comparison
sort: key 1 is numeric and spans multiple fields
+ echo '   1²---++3   1,234  Mi'
+ LC_ALL=fr_FR.UTF-8
+ sort --debug -k2g -k1b,1
sort: using ‘fr_FR.UTF-8’ sorting rules
sort: key 1 is numeric and spans multiple fields
+ echo '+1234 1234Gi 1,234M'
+ LC_ALL=fr_FR.UTF-8
+ sort --debug -k1,1n -k1,1g -k1,1h -k2,2n -k2,2g -k2,2h -k3,3n -k3,3g -k3,3h
sort: using ‘fr_FR.UTF-8’ sorting rules
+ compare exp out
+ compare_dev_null_ exp out
+ test 2 = 2
+ test xexp = x/dev/null
+ test xout = x/dev/null
+ return 2
+ case $? in
+ compare_ exp out
+ diff -u exp out
+ Exit 0
+ set +e
+ exit 0
+ exit 0
+ remove_tmp_
+ __st=0
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-sort-debug-keys.sh.VKw1
+ rm -rf /sources/coreutils-8.30/gt-sort-debug-keys.sh.VKw1
+ exit 0
PASS tests/misc/sort-debug-keys.sh (exit status: 0)
