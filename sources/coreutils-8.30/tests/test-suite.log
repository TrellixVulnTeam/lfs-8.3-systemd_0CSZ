================================================
   GNU coreutils 8.30: ./tests/test-suite.log
================================================

# TOTAL: 612
# PASS:  482
# SKIP:  129
# XFAIL: 0
# FAIL:  1
# XPASS: 0
# ERROR: 0

.. contents:: :depth: 2

SKIP: tests/tail-2/inotify-race
===============================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-inotify-race.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-inotify-race.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-inotify-race.sh.usbu
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-inotify-race.sh.usbu
++++ ls -dgo /sources/coreutils-8.30/gt-inotify-race.sh.usbu
+++ perms='drwx------ 2 4096 Nov 26 23:46 /sources/coreutils-8.30/gt-inotify-race.sh.usbu'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-inotify-race.sh.usbu
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-inotify-race.sh.usbu
++ cd /sources/coreutils-8.30/gt-inotify-race.sh.usbu
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ tail sleep
+ require_built_ tail sleep
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env tail --version
tail (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Paul Rubin, David MacKenzie, Ian Lance Taylor,
and Jim Meyering.
+ for i in $*
+ env sleep --version
sleep (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Jim Meyering and Paul Eggert.
+ touch file
+ touch tail.out
+ case $(cat gdb.out) in
++ cat gdb.out
+ skip_ 'can'\''t run gdb'
+ warn_ 'inotify-race.sh: skipped test: can'\''t run gdb'
+ case $IFS in
+ printf '%s\n' 'inotify-race.sh: skipped test: can'\''t run gdb'
inotify-race.sh: skipped test: can't run gdb
+ test 9 = 2
+ printf '%s\n' 'inotify-race.sh: skipped test: can'\''t run gdb'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ kill
+ kill
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-inotify-race.sh.usbu
+ rm -rf /sources/coreutils-8.30/gt-inotify-race.sh.usbu
+ exit 77
SKIP tests/tail-2/inotify-race.sh (exit status: 77)

SKIP: tests/tail-2/inotify-race2
================================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-inotify-race2.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-inotify-race2.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-inotify-race2.sh.8d5U
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-inotify-race2.sh.8d5U
++++ ls -dgo /sources/coreutils-8.30/gt-inotify-race2.sh.8d5U
+++ perms='drwx------ 2 4096 Nov 26 23:46 /sources/coreutils-8.30/gt-inotify-race2.sh.8d5U'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-inotify-race2.sh.8d5U
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-inotify-race2.sh.8d5U
++ cd /sources/coreutils-8.30/gt-inotify-race2.sh.8d5U
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ tail sleep
+ require_built_ tail sleep
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env tail --version
tail (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Paul Rubin, David MacKenzie, Ian Lance Taylor,
and Jim Meyering.
+ for i in $*
+ env sleep --version
sleep (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Jim Meyering and Paul Eggert.
+ touch file
+ touch tail.out
+ case $(cat gdb.out) in
++ cat gdb.out
+ skip_ 'can'\''t run gdb'
+ warn_ 'inotify-race2.sh: skipped test: can'\''t run gdb'
+ case $IFS in
+ printf '%s\n' 'inotify-race2.sh: skipped test: can'\''t run gdb'
inotify-race2.sh: skipped test: can't run gdb
+ test 9 = 2
+ printf '%s\n' 'inotify-race2.sh: skipped test: can'\''t run gdb'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ kill
+ kill
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-inotify-race2.sh.8d5U
+ rm -rf /sources/coreutils-8.30/gt-inotify-race2.sh.8d5U
+ exit 77
SKIP tests/tail-2/inotify-race2.sh (exit status: 77)

SKIP: tests/rm/ext3-perf
========================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-ext3-perf.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-ext3-perf.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-ext3-perf.sh.KAgA
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-ext3-perf.sh.KAgA
++++ ls -dgo /sources/coreutils-8.30/gt-ext3-perf.sh.KAgA
+++ perms='drwx------ 2 4096 Nov 26 23:46 /sources/coreutils-8.30/gt-ext3-perf.sh.KAgA'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-ext3-perf.sh.KAgA
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-ext3-perf.sh.KAgA
++ cd /sources/coreutils-8.30/gt-ext3-perf.sh.KAgA
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ rm
+ require_built_ rm
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env rm --version
rm (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Paul Rubin, David MacKenzie, Richard M. Stallman,
and Jim Meyering.
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ 'ext3-perf.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' 'ext3-perf.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
ext3-perf.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ sed 1q
+ printf '%s\n' 'ext3-perf.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-ext3-perf.sh.KAgA
+ rm -rf /sources/coreutils-8.30/gt-ext3-perf.sh.KAgA
+ exit 77
SKIP tests/rm/ext3-perf.sh (exit status: 77)

SKIP: tests/cp/no-ctx
=====================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-no-ctx.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-no-ctx.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-no-ctx.sh.T1ty
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-no-ctx.sh.T1ty
++++ ls -dgo /sources/coreutils-8.30/gt-no-ctx.sh.T1ty
+++ perms='drwx------ 2 4096 Nov 26 23:46 /sources/coreutils-8.30/gt-no-ctx.sh.T1ty'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-no-ctx.sh.T1ty
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-no-ctx.sh.T1ty
++ cd /sources/coreutils-8.30/gt-no-ctx.sh.T1ty
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ cp
+ require_built_ cp
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env cp --version
cp (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Torbjorn Granlund, David MacKenzie, and Jim Meyering.
+ require_gcc_shared_
+ gcc_shared_ - d.so -xc
+ local in=-
+ local out=d.so
+ shift 2
+ gcc -Wall -shared --std=gnu99 -fPIC -O2 -xc - -o d.so -ldl
+ rm -f d.so
+ require_selinux_
+ grep 'selinuxfs$' /proc/filesystems
+ skip_ 'this system lacks SELinux support'
+ warn_ 'no-ctx.sh: skipped test: this system lacks SELinux support'
+ case $IFS in
+ printf '%s\n' 'no-ctx.sh: skipped test: this system lacks SELinux support'
no-ctx.sh: skipped test: this system lacks SELinux support
+ test 9 = 2
+ printf '%s\n' 'no-ctx.sh: skipped test: this system lacks SELinux support'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-no-ctx.sh.T1ty
+ rm -rf /sources/coreutils-8.30/gt-no-ctx.sh.T1ty
+ exit 77
SKIP tests/cp/no-ctx.sh (exit status: 77)

SKIP: tests/misc/tty-eof
========================

tty-eof.pl: this script requires Perl's Expect package >=1.11
SKIP tests/misc/tty-eof.pl (exit status: 77)

SKIP: tests/tail-2/inotify-rotate-resources
===========================================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-inotify-rotate-resources.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-inotify-rotate-resources.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-inotify-rotate-resources.sh.80mM
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-inotify-rotate-resources.sh.80mM
++++ ls -dgo /sources/coreutils-8.30/gt-inotify-rotate-resources.sh.80mM
+++ perms='drwx------ 2 4096 Nov 26 23:46 /sources/coreutils-8.30/gt-inotify-rotate-resources.sh.80mM'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-inotify-rotate-resources.sh.80mM
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-inotify-rotate-resources.sh.80mM
++ cd /sources/coreutils-8.30/gt-inotify-rotate-resources.sh.80mM
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ tail
+ require_built_ tail
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env tail --version
tail (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Paul Rubin, David MacKenzie, Ian Lance Taylor,
and Jim Meyering.
+ require_local_dir_
+ require_mount_list_
+ local 'mount_list_fail=cannot read table of mounted file systems'
+ df --local
+ grep -F 'cannot read table of mounted file systems'
+ is_local_dir_ .
+ test 1 = 1
+ df --local .
+ grep '^#define HAVE_INOTIFY 1' /sources/coreutils-8.30/lib/config.h
+ require_strace_ inotify_add_watch,inotify_rm_watch
+ test 1 = 1
+ strace -V
+ skip_ 'no strace program'
+ warn_ 'inotify-rotate-resources.sh: skipped test: no strace program'
+ case $IFS in
+ printf '%s\n' 'inotify-rotate-resources.sh: skipped test: no strace program'
inotify-rotate-resources.sh: skipped test: no strace program
+ test 9 = 2
+ sed 1q
+ printf '%s\n' 'inotify-rotate-resources.sh: skipped test: no strace program'
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-inotify-rotate-resources.sh.80mM
+ rm -rf /sources/coreutils-8.30/gt-inotify-rotate-resources.sh.80mM
+ exit 77
SKIP tests/tail-2/inotify-rotate-resources.sh (exit status: 77)

SKIP: tests/tail-2/inotify-only-regular
=======================================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-inotify-only-regular.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-inotify-only-regular.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-inotify-only-regular.sh.AOJx
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-inotify-only-regular.sh.AOJx
++++ ls -dgo /sources/coreutils-8.30/gt-inotify-only-regular.sh.AOJx
+++ perms='drwx------ 2 4096 Nov 26 23:46 /sources/coreutils-8.30/gt-inotify-only-regular.sh.AOJx'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-inotify-only-regular.sh.AOJx
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-inotify-only-regular.sh.AOJx
++ cd /sources/coreutils-8.30/gt-inotify-only-regular.sh.AOJx
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ tail
+ require_built_ tail
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env tail --version
tail (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Paul Rubin, David MacKenzie, Ian Lance Taylor,
and Jim Meyering.
+ grep '^#define HAVE_INOTIFY 1' /sources/coreutils-8.30/lib/config.h
+ require_strace_ inotify_add_watch
+ test 1 = 1
+ strace -V
+ skip_ 'no strace program'
+ warn_ 'inotify-only-regular.sh: skipped test: no strace program'
+ case $IFS in
+ printf '%s\n' 'inotify-only-regular.sh: skipped test: no strace program'
inotify-only-regular.sh: skipped test: no strace program
+ test 9 = 2
+ printf '%s\n' 'inotify-only-regular.sh: skipped test: no strace program'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-inotify-only-regular.sh.AOJx
+ rm -rf /sources/coreutils-8.30/gt-inotify-only-regular.sh.AOJx
+ exit 77
SKIP tests/tail-2/inotify-only-regular.sh (exit status: 77)

SKIP: tests/rm/r-root
=====================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-r-root.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-r-root.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-r-root.sh.mgwQ
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-r-root.sh.mgwQ
++++ ls -dgo /sources/coreutils-8.30/gt-r-root.sh.mgwQ
+++ perms='drwx------ 2 4096 Nov 26 23:47 /sources/coreutils-8.30/gt-r-root.sh.mgwQ'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-r-root.sh.mgwQ
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-r-root.sh.mgwQ
++ cd /sources/coreutils-8.30/gt-r-root.sh.mgwQ
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ rm
+ require_built_ rm
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env rm --version
rm (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Paul Rubin, David MacKenzie, Richard M. Stallman,
and Jim Meyering.
+ skip_if_root_
+ uid_is_privileged_
++ id -u
+ my_uid=99
+ case $my_uid in
+ return 1
+ require_gcc_shared_
+ gcc_shared_ - d.so -xc
+ local in=-
+ local out=d.so
+ shift 2
+ gcc -Wall -shared --std=gnu99 -fPIC -O2 -xc - -o d.so -ldl
+ rm -f d.so
+ unset CU_TEST_SKIP_EXIT
+ USE_GDB=1
+ test 1 = 1
+ case $(cat gdb.out) in
++ cat gdb.out
+ skip_ 'can'\''t run gdb'
+ warn_ 'r-root.sh: skipped test: can'\''t run gdb'
+ case $IFS in
+ printf '%s\n' 'r-root.sh: skipped test: can'\''t run gdb'
r-root.sh: skipped test: can't run gdb
+ test 9 = 2
+ sed 1q
+ printf '%s\n' 'r-root.sh: skipped test: can'\''t run gdb'
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-r-root.sh.mgwQ
+ rm -rf /sources/coreutils-8.30/gt-r-root.sh.mgwQ
+ exit 77
SKIP tests/rm/r-root.sh (exit status: 77)

SKIP: tests/misc/arch
=====================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-arch.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-arch.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-arch.sh.dqNl
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-arch.sh.dqNl
++++ ls -dgo /sources/coreutils-8.30/gt-arch.sh.dqNl
+++ perms='drwx------ 2 4096 Nov 26 23:47 /sources/coreutils-8.30/gt-arch.sh.dqNl'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-arch.sh.dqNl
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-arch.sh.dqNl
++ cd /sources/coreutils-8.30/gt-arch.sh.dqNl
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ arch
+ require_built_ arch
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ echo 'arch: not built'
arch: not built
+ skip_=yes
+ test yes = yes
+ skip_ 'required program(s) not built'
+ warn_ 'arch.sh: skipped test: required program(s) not built'
+ case $IFS in
+ printf '%s\n' 'arch.sh: skipped test: required program(s) not built'
arch.sh: skipped test: required program(s) not built
+ test 9 = 2
+ printf '%s\n' 'arch.sh: skipped test: required program(s) not built'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-arch.sh.dqNl
+ rm -rf /sources/coreutils-8.30/gt-arch.sh.dqNl
+ exit 77
SKIP tests/misc/arch.sh (exit status: 77)

SKIP: tests/misc/coreutils
==========================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-coreutils.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-coreutils.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-coreutils.sh.pkaY
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-coreutils.sh.pkaY
++++ ls -dgo /sources/coreutils-8.30/gt-coreutils.sh.pkaY
+++ perms='drwx------ 2 4096 Nov 26 23:48 /sources/coreutils-8.30/gt-coreutils.sh.pkaY'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-coreutils.sh.pkaY
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-coreutils.sh.pkaY
++ cd /sources/coreutils-8.30/gt-coreutils.sh.pkaY
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ coreutils
+ require_built_ coreutils
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ echo 'coreutils: not built'
coreutils: not built
+ skip_=yes
+ test yes = yes
+ skip_ 'required program(s) not built'
+ warn_ 'coreutils.sh: skipped test: required program(s) not built'
+ case $IFS in
+ printf '%s\n' 'coreutils.sh: skipped test: required program(s) not built'
coreutils.sh: skipped test: required program(s) not built
+ test 9 = 2
+ printf '%s\n' 'coreutils.sh: skipped test: required program(s) not built'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-coreutils.sh.pkaY
+ rm -rf /sources/coreutils-8.30/gt-coreutils.sh.pkaY
+ exit 77
SKIP tests/misc/coreutils.sh (exit status: 77)

SKIP: tests/misc/kill
=====================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-kill.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-kill.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-kill.sh.9SbQ
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-kill.sh.9SbQ
++++ ls -dgo /sources/coreutils-8.30/gt-kill.sh.9SbQ
+++ perms='drwx------ 2 4096 Nov 26 23:48 /sources/coreutils-8.30/gt-kill.sh.9SbQ'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-kill.sh.9SbQ
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-kill.sh.9SbQ
++ cd /sources/coreutils-8.30/gt-kill.sh.9SbQ
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ kill
+ require_built_ kill
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ echo 'kill: not built'
kill: not built
+ skip_=yes
+ test yes = yes
+ skip_ 'required program(s) not built'
+ warn_ 'kill.sh: skipped test: required program(s) not built'
+ case $IFS in
+ printf '%s\n' 'kill.sh: skipped test: required program(s) not built'
kill.sh: skipped test: required program(s) not built
+ test 9 = 2
+ printf '%s\n' 'kill.sh: skipped test: required program(s) not built'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-kill.sh.9SbQ
+ rm -rf /sources/coreutils-8.30/gt-kill.sh.9SbQ
+ exit 77
SKIP tests/misc/kill.sh (exit status: 77)

SKIP: tests/misc/shuf-reservoir
===============================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-shuf-reservoir.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-shuf-reservoir.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-shuf-reservoir.sh.FJfm
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-shuf-reservoir.sh.FJfm
++++ ls -dgo /sources/coreutils-8.30/gt-shuf-reservoir.sh.FJfm
+++ perms='drwx------ 2 4096 Nov 26 23:48 /sources/coreutils-8.30/gt-shuf-reservoir.sh.FJfm'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-shuf-reservoir.sh.FJfm
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-shuf-reservoir.sh.FJfm
++ cd /sources/coreutils-8.30/gt-shuf-reservoir.sh.FJfm
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ shuf
+ require_built_ shuf
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env shuf --version
shuf (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Paul Eggert.
+ expensive_
+ test yes '!=' yes
+ require_valgrind_
+ valgrind --error-exitcode=1 true
+ skip_ 'requires a working valgrind'
+ warn_ 'shuf-reservoir.sh: skipped test: requires a working valgrind'
+ case $IFS in
+ printf '%s\n' 'shuf-reservoir.sh: skipped test: requires a working valgrind'
shuf-reservoir.sh: skipped test: requires a working valgrind
+ test 9 = 2
+ printf '%s\n' 'shuf-reservoir.sh: skipped test: requires a working valgrind'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-shuf-reservoir.sh.FJfm
+ rm -rf /sources/coreutils-8.30/gt-shuf-reservoir.sh.FJfm
+ exit 77
SKIP tests/misc/shuf-reservoir.sh (exit status: 77)

SKIP: tests/misc/sort-benchmark-random
======================================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-sort-benchmark-random.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-sort-benchmark-random.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-sort-benchmark-random.sh.v7nP
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-sort-benchmark-random.sh.v7nP
++++ ls -dgo /sources/coreutils-8.30/gt-sort-benchmark-random.sh.v7nP
+++ perms='drwx------ 2 4096 Nov 26 23:48 /sources/coreutils-8.30/gt-sort-benchmark-random.sh.v7nP'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-sort-benchmark-random.sh.v7nP
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-sort-benchmark-random.sh.v7nP
++ cd /sources/coreutils-8.30/gt-sort-benchmark-random.sh.v7nP
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ sort
+ require_built_ sort
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env sort --version
sort (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Mike Haertel and Paul Eggert.
+ require_perl_
+ : perl
+ perl -e 'use warnings'
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ 'sort-benchmark-random.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' 'sort-benchmark-random.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
sort-benchmark-random.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ sed 1q
+ printf '%s\n' 'sort-benchmark-random.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-sort-benchmark-random.sh.v7nP
+ rm -rf /sources/coreutils-8.30/gt-sort-benchmark-random.sh.v7nP
+ exit 77
SKIP tests/misc/sort-benchmark-random.sh (exit status: 77)

SKIP: tests/misc/sort-compress-hang
===================================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-sort-compress-hang.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-sort-compress-hang.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-sort-compress-hang.sh.E2p1
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-sort-compress-hang.sh.E2p1
++++ ls -dgo /sources/coreutils-8.30/gt-sort-compress-hang.sh.E2p1
+++ perms='drwx------ 2 4096 Nov 26 23:48 /sources/coreutils-8.30/gt-sort-compress-hang.sh.E2p1'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-sort-compress-hang.sh.E2p1
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-sort-compress-hang.sh.E2p1
++ cd /sources/coreutils-8.30/gt-sort-compress-hang.sh.E2p1
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ sort
+ require_built_ sort
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env sort --version
sort (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Mike Haertel and Paul Eggert.
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ 'sort-compress-hang.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' 'sort-compress-hang.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
sort-compress-hang.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ printf '%s\n' 'sort-compress-hang.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-sort-compress-hang.sh.E2p1
+ rm -rf /sources/coreutils-8.30/gt-sort-compress-hang.sh.E2p1
+ exit 77
SKIP tests/misc/sort-compress-hang.sh (exit status: 77)

SKIP: tests/misc/sort-h-thousands-sep
=====================================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-sort-h-thousands-sep.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-sort-h-thousands-sep.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-sort-h-thousands-sep.sh.Ltef
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-sort-h-thousands-sep.sh.Ltef
++++ ls -dgo /sources/coreutils-8.30/gt-sort-h-thousands-sep.sh.Ltef
+++ perms='drwx------ 2 4096 Nov 26 23:49 /sources/coreutils-8.30/gt-sort-h-thousands-sep.sh.Ltef'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-sort-h-thousands-sep.sh.Ltef
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-sort-h-thousands-sep.sh.Ltef
++ cd /sources/coreutils-8.30/gt-sort-h-thousands-sep.sh.Ltef
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ sort
+ require_built_ sort
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env sort --version
sort (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Mike Haertel and Paul Eggert.
+ TEST_LOCALE=sv_SE
++ LC_ALL=sv_SE
++ locale thousands_sep
locale: Cannot set LC_CTYPE to default locale: No such file or directory
locale: Cannot set LC_MESSAGES to default locale: No such file or directory
locale: Cannot set LC_ALL to default locale: No such file or directory
+ test '' = ' '
+ skip_ 'The Swedish locale with blank thousands separator is unavailable.'
+ warn_ 'sort-h-thousands-sep.sh: skipped test: The Swedish locale with blank thousands separator is unavailable.'
+ case $IFS in
+ printf '%s\n' 'sort-h-thousands-sep.sh: skipped test: The Swedish locale with blank thousands separator is unavailable.'
sort-h-thousands-sep.sh: skipped test: The Swedish locale with blank thousands separator is unavailable.
+ test 9 = 2
+ printf '%s\n' 'sort-h-thousands-sep.sh: skipped test: The Swedish locale with blank thousands separator is unavailable.'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-sort-h-thousands-sep.sh.Ltef
+ rm -rf /sources/coreutils-8.30/gt-sort-h-thousands-sep.sh.Ltef
+ exit 77
SKIP tests/misc/sort-h-thousands-sep.sh (exit status: 77)

SKIP: tests/misc/sort-spinlock-abuse
====================================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-sort-spinlock-abuse.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-sort-spinlock-abuse.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-sort-spinlock-abuse.sh.zvUF
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-sort-spinlock-abuse.sh.zvUF
++++ ls -dgo /sources/coreutils-8.30/gt-sort-spinlock-abuse.sh.zvUF
+++ perms='drwx------ 2 4096 Nov 26 23:49 /sources/coreutils-8.30/gt-sort-spinlock-abuse.sh.zvUF'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-sort-spinlock-abuse.sh.zvUF
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-sort-spinlock-abuse.sh.zvUF
++ cd /sources/coreutils-8.30/gt-sort-spinlock-abuse.sh.zvUF
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ sort
+ require_built_ sort
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env sort --version
sort (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Mike Haertel and Paul Eggert.
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ 'sort-spinlock-abuse.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' 'sort-spinlock-abuse.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
sort-spinlock-abuse.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ printf '%s\n' 'sort-spinlock-abuse.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-sort-spinlock-abuse.sh.zvUF
+ rm -rf /sources/coreutils-8.30/gt-sort-spinlock-abuse.sh.zvUF
+ exit 77
SKIP tests/misc/sort-spinlock-abuse.sh (exit status: 77)

SKIP: tests/misc/sort-stale-thread-mem
======================================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-sort-stale-thread-mem.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-sort-stale-thread-mem.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-sort-stale-thread-mem.sh.4hVq
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-sort-stale-thread-mem.sh.4hVq
++++ ls -dgo /sources/coreutils-8.30/gt-sort-stale-thread-mem.sh.4hVq
+++ perms='drwx------ 2 4096 Nov 26 23:49 /sources/coreutils-8.30/gt-sort-stale-thread-mem.sh.4hVq'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-sort-stale-thread-mem.sh.4hVq
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-sort-stale-thread-mem.sh.4hVq
++ cd /sources/coreutils-8.30/gt-sort-stale-thread-mem.sh.4hVq
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ sort
+ require_built_ sort
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env sort --version
sort (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Mike Haertel and Paul Eggert.
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ 'sort-stale-thread-mem.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' 'sort-stale-thread-mem.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
sort-stale-thread-mem.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ printf '%s\n' 'sort-stale-thread-mem.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-sort-stale-thread-mem.sh.4hVq
+ rm -rf /sources/coreutils-8.30/gt-sort-stale-thread-mem.sh.4hVq
+ exit 77
SKIP tests/misc/sort-stale-thread-mem.sh (exit status: 77)

SKIP: tests/misc/sort-u-FMR
===========================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-sort-u-FMR.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-sort-u-FMR.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-sort-u-FMR.sh.I1ec
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-sort-u-FMR.sh.I1ec
++++ ls -dgo /sources/coreutils-8.30/gt-sort-u-FMR.sh.I1ec
+++ perms='drwx------ 2 4096 Nov 26 23:49 /sources/coreutils-8.30/gt-sort-u-FMR.sh.I1ec'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-sort-u-FMR.sh.I1ec
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-sort-u-FMR.sh.I1ec
++ cd /sources/coreutils-8.30/gt-sort-u-FMR.sh.I1ec
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ sort
+ require_built_ sort
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env sort --version
sort (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Mike Haertel and Paul Eggert.
+ require_valgrind_
+ valgrind --error-exitcode=1 true
+ skip_ 'requires a working valgrind'
+ warn_ 'sort-u-FMR.sh: skipped test: requires a working valgrind'
+ case $IFS in
+ printf '%s\n' 'sort-u-FMR.sh: skipped test: requires a working valgrind'
sort-u-FMR.sh: skipped test: requires a working valgrind
+ test 9 = 2
+ printf '%s\n' 'sort-u-FMR.sh: skipped test: requires a working valgrind'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-sort-u-FMR.sh.I1ec
+ rm -rf /sources/coreutils-8.30/gt-sort-u-FMR.sh.I1ec
+ exit 77
SKIP tests/misc/sort-u-FMR.sh (exit status: 77)

SKIP: tests/misc/stty
=====================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-stty.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-stty.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-stty.sh.dG7L
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-stty.sh.dG7L
++++ ls -dgo /sources/coreutils-8.30/gt-stty.sh.dG7L
+++ perms='drwx------ 2 4096 Nov 26 23:49 /sources/coreutils-8.30/gt-stty.sh.dG7L'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-stty.sh.dG7L
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-stty.sh.dG7L
++ cd /sources/coreutils-8.30/gt-stty.sh.dG7L
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ stty
+ require_built_ stty
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env stty --version
stty (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by David MacKenzie.
+ require_controlling_input_terminal_
+ have_input_tty=yes
+ tty -s
+ test -t 0
+ test yes = no
+ require_trap_signame_
+ trap '' CHLD
+ require_strace_ ioctl
+ test 1 = 1
+ strace -V
+ skip_ 'no strace program'
+ warn_ 'stty.sh: skipped test: no strace program'
+ case $IFS in
+ printf '%s\n' 'stty.sh: skipped test: no strace program'
stty.sh: skipped test: no strace program
+ test 9 = 2
+ printf '%s\n' 'stty.sh: skipped test: no strace program'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-stty.sh.dG7L
+ rm -rf /sources/coreutils-8.30/gt-stty.sh.dG7L
+ exit 77
SKIP tests/misc/stty.sh (exit status: 77)

SKIP: tests/misc/tac-continue
=============================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-tac-continue.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-tac-continue.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-tac-continue.sh.uRyg
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-tac-continue.sh.uRyg
++++ ls -dgo /sources/coreutils-8.30/gt-tac-continue.sh.uRyg
+++ perms='drwx------ 2 4096 Nov 26 23:49 /sources/coreutils-8.30/gt-tac-continue.sh.uRyg'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-tac-continue.sh.uRyg
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-tac-continue.sh.uRyg
++ cd /sources/coreutils-8.30/gt-tac-continue.sh.uRyg
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ tac
+ require_built_ tac
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env tac --version
tac (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Jay Lepreau and David MacKenzie.
+ test x = x
+ skip_ 'FULL_PARTITION_TMPDIR not defined'
+ warn_ 'tac-continue.sh: skipped test: FULL_PARTITION_TMPDIR not defined'
+ case $IFS in
+ printf '%s\n' 'tac-continue.sh: skipped test: FULL_PARTITION_TMPDIR not defined'
tac-continue.sh: skipped test: FULL_PARTITION_TMPDIR not defined
+ test 9 = 2
+ printf '%s\n' 'tac-continue.sh: skipped test: FULL_PARTITION_TMPDIR not defined'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-tac-continue.sh.uRyg
+ rm -rf /sources/coreutils-8.30/gt-tac-continue.sh.uRyg
+ exit 77
SKIP tests/misc/tac-continue.sh (exit status: 77)

FAIL: tests/misc/tty
====================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-tty.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-tty.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-tty.sh.Q9Kd
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-tty.sh.Q9Kd
++++ ls -dgo /sources/coreutils-8.30/gt-tty.sh.Q9Kd
+++ perms='drwx------ 2 4096 Nov 26 23:49 /sources/coreutils-8.30/gt-tty.sh.Q9Kd'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-tty.sh.Q9Kd
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-tty.sh.Q9Kd
++ cd /sources/coreutils-8.30/gt-tty.sh.Q9Kd
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ tty
+ require_built_ tty
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env tty --version
tty (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by David MacKenzie.
+ test -t 0
+ tty
not a tty
+ fail=1
+ tty -s
+ returns_ 1 tty
not a tty
+ returns_ 1 tty -s
+ returns_ 1 tty
not a tty
+ returns_ 1 tty -s
+ returns_ 2 tty a
tty: extra operand 'a'
Try 'tty --help' for more information.
+ returns_ 2 tty -s a
tty: extra operand 'a'
Try 'tty --help' for more information.
+ test -w /dev/full
+ test -c /dev/full
+ test -t 0
+ returns_ 3 tty
tty: write error: No space left on device
+ returns_ 3 tty
tty: write error: No space left on device
+ Exit 1
+ set +e
+ exit 1
+ exit 1
+ remove_tmp_
+ __st=1
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-tty.sh.Q9Kd
+ rm -rf /sources/coreutils-8.30/gt-tty.sh.Q9Kd
+ exit 1
FAIL tests/misc/tty.sh (exit status: 1)

SKIP: tests/misc/xattr
======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-xattr.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-xattr.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-xattr.sh.abxa
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-xattr.sh.abxa
++++ ls -dgo /sources/coreutils-8.30/gt-xattr.sh.abxa
+++ perms='drwx------ 2 4096 Nov 26 23:49 /sources/coreutils-8.30/gt-xattr.sh.abxa'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-xattr.sh.abxa
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-xattr.sh.abxa
++ cd /sources/coreutils-8.30/gt-xattr.sh.abxa
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ cp mv ginstall
+ require_built_ cp mv ginstall
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ for i in "$@"
+ case " $built_programs " in
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env cp --version
cp (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Torbjorn Granlund, David MacKenzie, and Jim Meyering.
+ for i in $*
+ env mv --version
mv (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Mike Parker, David MacKenzie, and Jim Meyering.
+ for i in $*
+ env ginstall --version
install (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by David MacKenzie.
+ touch src dest
+ cp --preserve=xattr -n src dest
+ . /sources/coreutils-8.30/tests/other-fs-tmpdir
++ test '' = set
++ CANDIDATE_TMP_DIRS='/tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null'
++ other_partition_tmpdir=
+++ stat -c %d .
++ dot_mount_point=1797
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /tmp
+++ stat -L -c %d /tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /tmp
+++ stat -L -c %d /tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /dev/shm
+++ stat -L -c %d /dev/shm
++ d_mount_point=6
++ test x6 = x1797
++ mkdir /dev/shm/tmp46124
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /var/tmp
+++ stat -L -c %d /var/tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /usr/tmp
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /dev/null
++ continue
++ test -z ''
++ skip_ 'requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ warn_ 'xattr.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ case $IFS in
++ printf '%s\n' 'xattr.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
xattr.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn't find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.
++ test 9 = 2
++ printf '%s\n' 'xattr.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ sed 1q
++ Exit 77
++ set +e
++ exit 77
++ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ rm -rf ''
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-xattr.sh.abxa
+ rm -rf /sources/coreutils-8.30/gt-xattr.sh.abxa
+ exit 77
SKIP tests/misc/xattr.sh (exit status: 77)

SKIP: tests/cp/fiemap-extents
=============================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-fiemap-extents.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-fiemap-extents.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-fiemap-extents.sh.Ppqg
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-fiemap-extents.sh.Ppqg
++++ ls -dgo /sources/coreutils-8.30/gt-fiemap-extents.sh.Ppqg
+++ perms='drwx------ 2 4096 Nov 26 23:49 /sources/coreutils-8.30/gt-fiemap-extents.sh.Ppqg'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-fiemap-extents.sh.Ppqg
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-fiemap-extents.sh.Ppqg
++ cd /sources/coreutils-8.30/gt-fiemap-extents.sh.Ppqg
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ cp
+ require_built_ cp
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env cp --version
cp (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Torbjorn Granlund, David MacKenzie, and Jim Meyering.
+ require_sparse_support_
+ test 0 = 0
+ t=sparse.49705
+ dd bs=1 seek=128K of=sparse.49705
++ du -sk sparse.49705
+ set x 0 sparse.49705
+ kb_size=0
+ rm -f sparse.49705
+ test 0 -ge 128
+ touch fiemap_chk
+ fiemap_capable_ fiemap_chk
+ python
./init.cfg: line 537: python: command not found
+ warn_ 'fiemap_capable_: python missing: assuming not fiemap capable'
+ case $IFS in
+ printf '%s\n' 'fiemap_capable_: python missing: assuming not fiemap capable'
fiemap_capable_: python missing: assuming not fiemap capable
+ test 9 = 2
+ sed 1q
+ printf '%s\n' 'fiemap_capable_: python missing: assuming not fiemap capable'
+ return 1
+ skip_ 'this file system lacks FIEMAP support'
+ warn_ 'fiemap-extents.sh: skipped test: this file system lacks FIEMAP support'
+ case $IFS in
+ printf '%s\n' 'fiemap-extents.sh: skipped test: this file system lacks FIEMAP support'
fiemap-extents.sh: skipped test: this file system lacks FIEMAP support
+ test 9 = 2
+ printf '%s\n' 'fiemap-extents.sh: skipped test: this file system lacks FIEMAP support'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-fiemap-extents.sh.Ppqg
+ rm -rf /sources/coreutils-8.30/gt-fiemap-extents.sh.Ppqg
+ exit 77
SKIP tests/cp/fiemap-extents.sh (exit status: 77)

SKIP: tests/cp/fiemap-FMR
=========================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-fiemap-FMR.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-fiemap-FMR.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-fiemap-FMR.sh.NgJM
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-fiemap-FMR.sh.NgJM
++++ ls -dgo /sources/coreutils-8.30/gt-fiemap-FMR.sh.NgJM
+++ perms='drwx------ 2 4096 Nov 26 23:49 /sources/coreutils-8.30/gt-fiemap-FMR.sh.NgJM'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-fiemap-FMR.sh.NgJM
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-fiemap-FMR.sh.NgJM
++ cd /sources/coreutils-8.30/gt-fiemap-FMR.sh.NgJM
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ cp
+ require_built_ cp
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env cp --version
cp (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Torbjorn Granlund, David MacKenzie, and Jim Meyering.
+ require_valgrind_
+ valgrind --error-exitcode=1 true
+ skip_ 'requires a working valgrind'
+ warn_ 'fiemap-FMR.sh: skipped test: requires a working valgrind'
+ case $IFS in
+ printf '%s\n' 'fiemap-FMR.sh: skipped test: requires a working valgrind'
fiemap-FMR.sh: skipped test: requires a working valgrind
+ test 9 = 2
+ printf '%s\n' 'fiemap-FMR.sh: skipped test: requires a working valgrind'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-fiemap-FMR.sh.NgJM
+ rm -rf /sources/coreutils-8.30/gt-fiemap-FMR.sh.NgJM
+ exit 77
SKIP tests/cp/fiemap-FMR.sh (exit status: 77)

SKIP: tests/cp/fiemap-perf
==========================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-fiemap-perf.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-fiemap-perf.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-fiemap-perf.sh.9PI5
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-fiemap-perf.sh.9PI5
++++ ls -dgo /sources/coreutils-8.30/gt-fiemap-perf.sh.9PI5
+++ perms='drwx------ 2 4096 Nov 26 23:49 /sources/coreutils-8.30/gt-fiemap-perf.sh.9PI5'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-fiemap-perf.sh.9PI5
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-fiemap-perf.sh.9PI5
++ cd /sources/coreutils-8.30/gt-fiemap-perf.sh.9PI5
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ cp
+ require_built_ cp
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env cp --version
cp (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Torbjorn Granlund, David MacKenzie, and Jim Meyering.
+ touch fiemap_chk
+ fiemap_capable_ fiemap_chk
+ python
./init.cfg: line 537: python: command not found
+ warn_ 'fiemap_capable_: python missing: assuming not fiemap capable'
+ case $IFS in
+ printf '%s\n' 'fiemap_capable_: python missing: assuming not fiemap capable'
fiemap_capable_: python missing: assuming not fiemap capable
+ test 9 = 2
+ printf '%s\n' 'fiemap_capable_: python missing: assuming not fiemap capable'
+ sed 1q
+ return 1
+ skip_ 'this file system lacks FIEMAP support'
+ warn_ 'fiemap-perf.sh: skipped test: this file system lacks FIEMAP support'
+ case $IFS in
+ printf '%s\n' 'fiemap-perf.sh: skipped test: this file system lacks FIEMAP support'
fiemap-perf.sh: skipped test: this file system lacks FIEMAP support
+ test 9 = 2
+ printf '%s\n' 'fiemap-perf.sh: skipped test: this file system lacks FIEMAP support'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-fiemap-perf.sh.9PI5
+ rm -rf /sources/coreutils-8.30/gt-fiemap-perf.sh.9PI5
+ exit 77
SKIP tests/cp/fiemap-perf.sh (exit status: 77)

SKIP: tests/cp/fiemap-2
=======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-fiemap-2.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-fiemap-2.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-fiemap-2.sh.KjwK
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-fiemap-2.sh.KjwK
++++ ls -dgo /sources/coreutils-8.30/gt-fiemap-2.sh.KjwK
+++ perms='drwx------ 2 4096 Nov 26 23:49 /sources/coreutils-8.30/gt-fiemap-2.sh.KjwK'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-fiemap-2.sh.KjwK
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-fiemap-2.sh.KjwK
++ cd /sources/coreutils-8.30/gt-fiemap-2.sh.KjwK
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ cp
+ require_built_ cp
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env cp --version
cp (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Torbjorn Granlund, David MacKenzie, and Jim Meyering.
+ touch fiemap_chk
+ fiemap_capable_ fiemap_chk
+ python
./init.cfg: line 537: python: command not found
+ warn_ 'fiemap_capable_: python missing: assuming not fiemap capable'
+ case $IFS in
+ printf '%s\n' 'fiemap_capable_: python missing: assuming not fiemap capable'
fiemap_capable_: python missing: assuming not fiemap capable
+ test 9 = 2
+ printf '%s\n' 'fiemap_capable_: python missing: assuming not fiemap capable'
+ sed 1q
+ return 1
+ skip_ 'this file system lacks FIEMAP support'
+ warn_ 'fiemap-2.sh: skipped test: this file system lacks FIEMAP support'
+ case $IFS in
+ printf '%s\n' 'fiemap-2.sh: skipped test: this file system lacks FIEMAP support'
fiemap-2.sh: skipped test: this file system lacks FIEMAP support
+ test 9 = 2
+ printf '%s\n' 'fiemap-2.sh: skipped test: this file system lacks FIEMAP support'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-fiemap-2.sh.KjwK
+ rm -rf /sources/coreutils-8.30/gt-fiemap-2.sh.KjwK
+ exit 77
SKIP tests/cp/fiemap-2.sh (exit status: 77)

SKIP: tests/cp/perm
===================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-perm.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-perm.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-perm.sh.Vyvx
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-perm.sh.Vyvx
++++ ls -dgo /sources/coreutils-8.30/gt-perm.sh.Vyvx
+++ perms='drwx------ 2 4096 Nov 26 23:49 /sources/coreutils-8.30/gt-perm.sh.Vyvx'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-perm.sh.Vyvx
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-perm.sh.Vyvx
++ cd /sources/coreutils-8.30/gt-perm.sh.Vyvx
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ cp mv
+ require_built_ cp mv
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env cp --version
cp (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Torbjorn Granlund, David MacKenzie, and Jim Meyering.
+ for i in $*
+ env mv --version
mv (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Mike Parker, David MacKenzie, and Jim Meyering.
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ 'perm.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' 'perm.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
perm.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ printf '%s\n' 'perm.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-perm.sh.Vyvx
+ rm -rf /sources/coreutils-8.30/gt-perm.sh.Vyvx
+ exit 77
SKIP tests/cp/perm.sh (exit status: 77)

SKIP: tests/cp/reflink-auto
===========================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-reflink-auto.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-reflink-auto.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-reflink-auto.sh.ZhDC
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-reflink-auto.sh.ZhDC
++++ ls -dgo /sources/coreutils-8.30/gt-reflink-auto.sh.ZhDC
+++ perms='drwx------ 2 4096 Nov 26 23:49 /sources/coreutils-8.30/gt-reflink-auto.sh.ZhDC'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-reflink-auto.sh.ZhDC
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-reflink-auto.sh.ZhDC
++ cd /sources/coreutils-8.30/gt-reflink-auto.sh.ZhDC
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ cp
+ require_built_ cp
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env cp --version
cp (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Torbjorn Granlund, David MacKenzie, and Jim Meyering.
+ . /sources/coreutils-8.30/tests/other-fs-tmpdir
++ test '' = set
++ CANDIDATE_TMP_DIRS='/tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null'
++ other_partition_tmpdir=
+++ stat -c %d .
++ dot_mount_point=1797
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /tmp
+++ stat -L -c %d /tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /tmp
+++ stat -L -c %d /tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /dev/shm
+++ stat -L -c %d /dev/shm
++ d_mount_point=6
++ test x6 = x1797
++ mkdir /dev/shm/tmp51591
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /var/tmp
+++ stat -L -c %d /var/tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /usr/tmp
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /dev/null
++ continue
++ test -z ''
++ skip_ 'requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ warn_ 'reflink-auto.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ case $IFS in
++ printf '%s\n' 'reflink-auto.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
reflink-auto.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn't find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.
++ test 9 = 2
++ printf '%s\n' 'reflink-auto.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ sed 1q
++ Exit 77
++ set +e
++ exit 77
++ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ rm -rf ''
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-reflink-auto.sh.ZhDC
+ rm -rf /sources/coreutils-8.30/gt-reflink-auto.sh.ZhDC
+ exit 77
SKIP tests/cp/reflink-auto.sh (exit status: 77)

SKIP: tests/df/skip-rootfs
==========================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-skip-rootfs.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-skip-rootfs.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-skip-rootfs.sh.tfu3
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-skip-rootfs.sh.tfu3
++++ ls -dgo /sources/coreutils-8.30/gt-skip-rootfs.sh.tfu3
+++ perms='drwx------ 2 4096 Nov 26 23:49 /sources/coreutils-8.30/gt-skip-rootfs.sh.tfu3'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-skip-rootfs.sh.tfu3
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-skip-rootfs.sh.tfu3
++ cd /sources/coreutils-8.30/gt-skip-rootfs.sh.tfu3
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ df
+ require_built_ df
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env df --version
df (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Torbjorn Granlund, David MacKenzie, and Paul Eggert.
+ timeout 10 df
Filesystem     1K-blocks     Used Available Use% Mounted on
/dev/loop5     263174212 25019296 224716760  11% /
udev            72060948        0  72060948   0% /dev
tmpfs           72072972        0  72072972   0% /run
+ df -a
+ grep '^rootfs' out
+ skip_ 'no rootfs in mtab'
+ warn_ 'skip-rootfs.sh: skipped test: no rootfs in mtab'
+ case $IFS in
+ printf '%s\n' 'skip-rootfs.sh: skipped test: no rootfs in mtab'
skip-rootfs.sh: skipped test: no rootfs in mtab
+ test 9 = 2
+ printf '%s\n' 'skip-rootfs.sh: skipped test: no rootfs in mtab'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-skip-rootfs.sh.tfu3
+ rm -rf /sources/coreutils-8.30/gt-skip-rootfs.sh.tfu3
+ exit 77
SKIP tests/df/skip-rootfs.sh (exit status: 77)

SKIP: tests/dd/nocache_eof
==========================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-nocache_eof.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-nocache_eof.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-nocache_eof.sh.0nZF
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-nocache_eof.sh.0nZF
++++ ls -dgo /sources/coreutils-8.30/gt-nocache_eof.sh.0nZF
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-nocache_eof.sh.0nZF'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-nocache_eof.sh.0nZF
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-nocache_eof.sh.0nZF
++ cd /sources/coreutils-8.30/gt-nocache_eof.sh.0nZF
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ dd
+ require_built_ dd
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env dd --version
dd (coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Paul Rubin, David MacKenzie, and Stuart Kemp.
+ require_strace_ fadvise64,fadvise64_64
+ test 1 = 1
+ strace -V
+ skip_ 'no strace program'
+ warn_ 'nocache_eof.sh: skipped test: no strace program'
+ case $IFS in
+ printf '%s\n' 'nocache_eof.sh: skipped test: no strace program'
nocache_eof.sh: skipped test: no strace program
+ test 9 = 2
+ printf '%s\n' 'nocache_eof.sh: skipped test: no strace program'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-nocache_eof.sh.0nZF
+ rm -rf /sources/coreutils-8.30/gt-nocache_eof.sh.0nZF
+ exit 77
SKIP tests/dd/nocache_eof.sh (exit status: 77)

SKIP: tests/du/2g
=================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-2g.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-2g.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-2g.sh.ytHS
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-2g.sh.ytHS
++++ ls -dgo /sources/coreutils-8.30/gt-2g.sh.ytHS
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-2g.sh.ytHS'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-2g.sh.ytHS
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-2g.sh.ytHS
++ cd /sources/coreutils-8.30/gt-2g.sh.ytHS
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ du
+ require_built_ du
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env du --version
du (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Torbjorn Granlund, David MacKenzie, Paul Eggert,
and Jim Meyering.
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ '2g.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' '2g.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
2g.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ printf '%s\n' '2g.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-2g.sh.ytHS
+ rm -rf /sources/coreutils-8.30/gt-2g.sh.ytHS
+ exit 77
SKIP tests/du/2g.sh (exit status: 77)

SKIP: tests/du/move-dir-while-traversing
========================================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-move-dir-while-traversing.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-move-dir-while-traversing.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-move-dir-while-traversing.sh.6PU8
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-move-dir-while-traversing.sh.6PU8
++++ ls -dgo /sources/coreutils-8.30/gt-move-dir-while-traversing.sh.6PU8
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-move-dir-while-traversing.sh.6PU8'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-move-dir-while-traversing.sh.6PU8
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-move-dir-while-traversing.sh.6PU8
++ cd /sources/coreutils-8.30/gt-move-dir-while-traversing.sh.6PU8
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ du
+ require_built_ du
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env du --version
du (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Torbjorn Granlund, David MacKenzie, Paul Eggert,
and Jim Meyering.
+ require_trap_signame_
+ trap '' CHLD
+ python -m pyinotify -h
./tests/du/move-dir-while-traversing.sh: line 24: python: command not found
+ skip_ 'python inotify package not installed'
+ warn_ 'move-dir-while-traversing.sh: skipped test: python inotify package not installed'
+ case $IFS in
+ printf '%s\n' 'move-dir-while-traversing.sh: skipped test: python inotify package not installed'
move-dir-while-traversing.sh: skipped test: python inotify package not installed
+ test 9 = 2
+ sed 1q
+ printf '%s\n' 'move-dir-while-traversing.sh: skipped test: python inotify package not installed'
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-move-dir-while-traversing.sh.6PU8
+ rm -rf /sources/coreutils-8.30/gt-move-dir-while-traversing.sh.6PU8
+ exit 77
SKIP tests/du/move-dir-while-traversing.sh (exit status: 77)

SKIP: tests/du/one-file-system
==============================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-one-file-system.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-one-file-system.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-one-file-system.sh.ZZyM
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-one-file-system.sh.ZZyM
++++ ls -dgo /sources/coreutils-8.30/gt-one-file-system.sh.ZZyM
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-one-file-system.sh.ZZyM'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-one-file-system.sh.ZZyM
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-one-file-system.sh.ZZyM
++ cd /sources/coreutils-8.30/gt-one-file-system.sh.ZZyM
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ du
+ require_built_ du
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env du --version
du (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Torbjorn Granlund, David MacKenzie, Paul Eggert,
and Jim Meyering.
+ . /sources/coreutils-8.30/tests/other-fs-tmpdir
++ test '' = set
++ CANDIDATE_TMP_DIRS='/tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null'
++ other_partition_tmpdir=
+++ stat -c %d .
++ dot_mount_point=1797
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /tmp
+++ stat -L -c %d /tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /tmp
+++ stat -L -c %d /tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /dev/shm
+++ stat -L -c %d /dev/shm
++ d_mount_point=6
++ test x6 = x1797
++ mkdir /dev/shm/tmp57907
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /var/tmp
+++ stat -L -c %d /var/tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /usr/tmp
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /dev/null
++ continue
++ test -z ''
++ skip_ 'requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ warn_ 'one-file-system.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ case $IFS in
++ printf '%s\n' 'one-file-system.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
one-file-system.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn't find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.
++ test 9 = 2
++ printf '%s\n' 'one-file-system.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ sed 1q
++ Exit 77
++ set +e
++ exit 77
++ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ rm -rf ''
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-one-file-system.sh.ZZyM
+ rm -rf /sources/coreutils-8.30/gt-one-file-system.sh.ZZyM
+ exit 77
SKIP tests/du/one-file-system.sh (exit status: 77)

SKIP: tests/id/gnu-zero-uids
============================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-gnu-zero-uids.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-gnu-zero-uids.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-gnu-zero-uids.sh.WO95
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-gnu-zero-uids.sh.WO95
++++ ls -dgo /sources/coreutils-8.30/gt-gnu-zero-uids.sh.WO95
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-gnu-zero-uids.sh.WO95'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-gnu-zero-uids.sh.WO95
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-gnu-zero-uids.sh.WO95
++ cd /sources/coreutils-8.30/gt-gnu-zero-uids.sh.WO95
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ id
+ require_built_ id
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env id --version
id (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Arnold Robbins and David MacKenzie.
+ require_gnu_
++ uname
+ test Linux = GNU
+ skip_ 'not running on GNU/Hurd'
+ warn_ 'gnu-zero-uids.sh: skipped test: not running on GNU/Hurd'
+ case $IFS in
+ printf '%s\n' 'gnu-zero-uids.sh: skipped test: not running on GNU/Hurd'
gnu-zero-uids.sh: skipped test: not running on GNU/Hurd
+ test 9 = 2
+ printf '%s\n' 'gnu-zero-uids.sh: skipped test: not running on GNU/Hurd'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-gnu-zero-uids.sh.WO95
+ rm -rf /sources/coreutils-8.30/gt-gnu-zero-uids.sh.WO95
+ exit 77
SKIP tests/id/gnu-zero-uids.sh (exit status: 77)

SKIP: tests/id/no-context
=========================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-no-context.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-no-context.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-no-context.sh.1aVP
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-no-context.sh.1aVP
++++ ls -dgo /sources/coreutils-8.30/gt-no-context.sh.1aVP
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-no-context.sh.1aVP'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-no-context.sh.1aVP
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-no-context.sh.1aVP
++ cd /sources/coreutils-8.30/gt-no-context.sh.1aVP
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ id
+ require_built_ id
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env id --version
id (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Arnold Robbins and David MacKenzie.
+ require_selinux_
+ grep 'selinuxfs$' /proc/filesystems
+ skip_ 'this system lacks SELinux support'
+ warn_ 'no-context.sh: skipped test: this system lacks SELinux support'
+ case $IFS in
+ printf '%s\n' 'no-context.sh: skipped test: this system lacks SELinux support'
no-context.sh: skipped test: this system lacks SELinux support
+ test 9 = 2
+ printf '%s\n' 'no-context.sh: skipped test: this system lacks SELinux support'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-no-context.sh.1aVP
+ rm -rf /sources/coreutils-8.30/gt-no-context.sh.1aVP
+ exit 77
SKIP tests/id/no-context.sh (exit status: 77)

SKIP: tests/id/context
======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-context.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-context.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-context.sh.hkYn
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-context.sh.hkYn
++++ ls -dgo /sources/coreutils-8.30/gt-context.sh.hkYn
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-context.sh.hkYn'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-context.sh.hkYn
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-context.sh.hkYn
++ cd /sources/coreutils-8.30/gt-context.sh.hkYn
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ id
+ require_built_ id
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env id --version
id (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Arnold Robbins and David MacKenzie.
+ require_selinux_
+ grep 'selinuxfs$' /proc/filesystems
+ skip_ 'this system lacks SELinux support'
+ warn_ 'context.sh: skipped test: this system lacks SELinux support'
+ case $IFS in
+ printf '%s\n' 'context.sh: skipped test: this system lacks SELinux support'
context.sh: skipped test: this system lacks SELinux support
+ test 9 = 2
+ printf '%s\n' 'context.sh: skipped test: this system lacks SELinux support'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-context.sh.hkYn
+ rm -rf /sources/coreutils-8.30/gt-context.sh.hkYn
+ exit 77
SKIP tests/id/context.sh (exit status: 77)

SKIP: tests/id/smack
====================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-smack.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-smack.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-smack.sh.f6IU
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-smack.sh.f6IU
++++ ls -dgo /sources/coreutils-8.30/gt-smack.sh.f6IU
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-smack.sh.f6IU'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-smack.sh.f6IU
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-smack.sh.f6IU
++ cd /sources/coreutils-8.30/gt-smack.sh.f6IU
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ id
+ require_built_ id
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env id --version
id (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Arnold Robbins and David MacKenzie.
+ require_smack_
+ grep 'smackfs$' /proc/filesystems
+ skip_ 'this system lacks SMACK support'
+ warn_ 'smack.sh: skipped test: this system lacks SMACK support'
+ case $IFS in
+ printf '%s\n' 'smack.sh: skipped test: this system lacks SMACK support'
smack.sh: skipped test: this system lacks SMACK support
+ test 9 = 2
+ printf '%s\n' 'smack.sh: skipped test: this system lacks SMACK support'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-smack.sh.f6IU
+ rm -rf /sources/coreutils-8.30/gt-smack.sh.f6IU
+ exit 77
SKIP tests/id/smack.sh (exit status: 77)

SKIP: tests/install/install-C-selinux
=====================================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-install-C-selinux.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-install-C-selinux.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-install-C-selinux.sh.sK3N
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-install-C-selinux.sh.sK3N
++++ ls -dgo /sources/coreutils-8.30/gt-install-C-selinux.sh.sK3N
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-install-C-selinux.sh.sK3N'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-install-C-selinux.sh.sK3N
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-install-C-selinux.sh.sK3N
++ cd /sources/coreutils-8.30/gt-install-C-selinux.sh.sK3N
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ ginstall
+ require_built_ ginstall
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env ginstall --version
install (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by David MacKenzie.
+ require_selinux_
+ grep 'selinuxfs$' /proc/filesystems
+ skip_ 'this system lacks SELinux support'
+ warn_ 'install-C-selinux.sh: skipped test: this system lacks SELinux support'
+ case $IFS in
+ printf '%s\n' 'install-C-selinux.sh: skipped test: this system lacks SELinux support'
install-C-selinux.sh: skipped test: this system lacks SELinux support
+ test 9 = 2
+ printf '%s\n' 'install-C-selinux.sh: skipped test: this system lacks SELinux support'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-install-C-selinux.sh.sK3N
+ rm -rf /sources/coreutils-8.30/gt-install-C-selinux.sh.sK3N
+ exit 77
SKIP tests/install/install-C-selinux.sh (exit status: 77)

SKIP: tests/install/install-Z-selinux
=====================================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-install-Z-selinux.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-install-Z-selinux.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-install-Z-selinux.sh.DHPk
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-install-Z-selinux.sh.DHPk
++++ ls -dgo /sources/coreutils-8.30/gt-install-Z-selinux.sh.DHPk
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-install-Z-selinux.sh.DHPk'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-install-Z-selinux.sh.DHPk
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-install-Z-selinux.sh.DHPk
++ cd /sources/coreutils-8.30/gt-install-Z-selinux.sh.DHPk
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ ginstall
+ require_built_ ginstall
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env ginstall --version
install (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by David MacKenzie.
+ require_selinux_
+ grep 'selinuxfs$' /proc/filesystems
+ skip_ 'this system lacks SELinux support'
+ warn_ 'install-Z-selinux.sh: skipped test: this system lacks SELinux support'
+ case $IFS in
+ printf '%s\n' 'install-Z-selinux.sh: skipped test: this system lacks SELinux support'
install-Z-selinux.sh: skipped test: this system lacks SELinux support
+ test 9 = 2
+ printf '%s\n' 'install-Z-selinux.sh: skipped test: this system lacks SELinux support'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-install-Z-selinux.sh.DHPk
+ rm -rf /sources/coreutils-8.30/gt-install-Z-selinux.sh.DHPk
+ exit 77
SKIP tests/install/install-Z-selinux.sh (exit status: 77)

SKIP: tests/ls/no-cap
=====================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-no-cap.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-no-cap.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-no-cap.sh.T0nI
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-no-cap.sh.T0nI
++++ ls -dgo /sources/coreutils-8.30/gt-no-cap.sh.T0nI
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-no-cap.sh.T0nI'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-no-cap.sh.T0nI
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-no-cap.sh.T0nI
++ cd /sources/coreutils-8.30/gt-no-cap.sh.T0nI
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ ls
+ require_built_ ls
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env ls --version
ls (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Richard M. Stallman and David MacKenzie.
+ require_strace_ capget
+ test 1 = 1
+ strace -V
+ skip_ 'no strace program'
+ warn_ 'no-cap.sh: skipped test: no strace program'
+ case $IFS in
+ printf '%s\n' 'no-cap.sh: skipped test: no strace program'
no-cap.sh: skipped test: no strace program
+ test 9 = 2
+ printf '%s\n' 'no-cap.sh: skipped test: no strace program'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-no-cap.sh.T0nI
+ rm -rf /sources/coreutils-8.30/gt-no-cap.sh.T0nI
+ exit 77
SKIP tests/ls/no-cap.sh (exit status: 77)

SKIP: tests/ls/root-rel-symlink-color
=====================================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-root-rel-symlink-color.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-root-rel-symlink-color.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-root-rel-symlink-color.sh.UgfL
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-root-rel-symlink-color.sh.UgfL
++++ ls -dgo /sources/coreutils-8.30/gt-root-rel-symlink-color.sh.UgfL
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-root-rel-symlink-color.sh.UgfL'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-root-rel-symlink-color.sh.UgfL
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-root-rel-symlink-color.sh.UgfL
++ cd /sources/coreutils-8.30/gt-root-rel-symlink-color.sh.UgfL
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ ls test
+ require_built_ ls test
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env ls --version
ls (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Richard M. Stallman and David MacKenzie.
+ for i in $*
+ env test --version
+ symlink_to_rel=
+ for i in /*
+ env test -h /000-functions.sh
+ continue
+ for i in /*
+ env test -h /README.md
+ continue
+ for i in /*
+ env test -h /bin
+ continue
+ for i in /*
+ env test -h /boot
+ continue
+ for i in /*
+ env test -h /dev
+ continue
+ for i in /*
+ env test -h /etc
+ continue
+ for i in /*
+ env test -h /home
+ continue
+ for i in /*
+ env test -h /lib
+ continue
+ for i in /*
+ env test -h /lib64
+ continue
+ for i in /*
+ env test -h /lost+found
+ continue
+ for i in /*
+ env test -h /media
+ continue
+ for i in /*
+ env test -h /mnt
+ continue
+ for i in /*
+ env test -h /opt
+ continue
+ for i in /*
+ env test -h /proc
+ continue
+ for i in /*
+ env test -h /root
+ continue
+ for i in /*
+ env test -h /run
+ continue
+ for i in /*
+ env test -h /sbin
+ continue
+ for i in /*
+ env test -h /sources
+ continue
+ for i in /*
+ env test -h /srv
+ continue
+ for i in /*
+ env test -h /sys
+ continue
+ for i in /*
+ env test -h /tmp
+ continue
+ for i in /*
+ env test -h /tools
+ continue
+ for i in /*
+ env test -h /usr
+ continue
+ for i in /*
+ env test -h /var
+ continue
+ test -z ''
+ skip_ no relative symlink in /
+ warn_ 'root-rel-symlink-color.sh: skipped test: no' relative symlink in /
+ case $IFS in
+ printf '%s\n' 'root-rel-symlink-color.sh: skipped test: no relative symlink in /'
root-rel-symlink-color.sh: skipped test: no relative symlink in /
+ test 9 = 2
+ printf '%s\n' 'root-rel-symlink-color.sh: skipped test: no relative symlink in /'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-root-rel-symlink-color.sh.UgfL
+ rm -rf /sources/coreutils-8.30/gt-root-rel-symlink-color.sh.UgfL
+ exit 77
SKIP tests/ls/root-rel-symlink-color.sh (exit status: 77)

SKIP: tests/ls/stat-free-color
==============================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-stat-free-color.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-stat-free-color.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-stat-free-color.sh.ZptS
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-stat-free-color.sh.ZptS
++++ ls -dgo /sources/coreutils-8.30/gt-stat-free-color.sh.ZptS
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-stat-free-color.sh.ZptS'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-stat-free-color.sh.ZptS
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-stat-free-color.sh.ZptS
++ cd /sources/coreutils-8.30/gt-stat-free-color.sh.ZptS
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ ls
+ require_built_ ls
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env ls --version
ls (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Richard M. Stallman and David MacKenzie.
+ stats=stat,lstat,stat64,lstat64,newfstatat
+ require_strace_ stat,lstat,stat64,lstat64,newfstatat
+ test 1 = 1
+ strace -V
+ skip_ 'no strace program'
+ warn_ 'stat-free-color.sh: skipped test: no strace program'
+ case $IFS in
+ printf '%s\n' 'stat-free-color.sh: skipped test: no strace program'
stat-free-color.sh: skipped test: no strace program
+ test 9 = 2
+ printf '%s\n' 'stat-free-color.sh: skipped test: no strace program'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-stat-free-color.sh.ZptS
+ rm -rf /sources/coreutils-8.30/gt-stat-free-color.sh.ZptS
+ exit 77
SKIP tests/ls/stat-free-color.sh (exit status: 77)

SKIP: tests/ls/stat-free-symlinks
=================================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-stat-free-symlinks.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-stat-free-symlinks.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-stat-free-symlinks.sh.365B
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-stat-free-symlinks.sh.365B
++++ ls -dgo /sources/coreutils-8.30/gt-stat-free-symlinks.sh.365B
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-stat-free-symlinks.sh.365B'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-stat-free-symlinks.sh.365B
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-stat-free-symlinks.sh.365B
++ cd /sources/coreutils-8.30/gt-stat-free-symlinks.sh.365B
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ ls
+ require_built_ ls
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env ls --version
ls (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Richard M. Stallman and David MacKenzie.
+ require_strace_ stat
+ test 1 = 1
+ strace -V
+ skip_ 'no strace program'
+ warn_ 'stat-free-symlinks.sh: skipped test: no strace program'
+ case $IFS in
+ printf '%s\n' 'stat-free-symlinks.sh: skipped test: no strace program'
stat-free-symlinks.sh: skipped test: no strace program
+ test 9 = 2
+ printf '%s\n' 'stat-free-symlinks.sh: skipped test: no strace program'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-stat-free-symlinks.sh.365B
+ rm -rf /sources/coreutils-8.30/gt-stat-free-symlinks.sh.365B
+ exit 77
SKIP tests/ls/stat-free-symlinks.sh (exit status: 77)

SKIP: tests/mkdir/selinux
=========================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-selinux.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-selinux.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-selinux.sh.VUAX
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-selinux.sh.VUAX
++++ ls -dgo /sources/coreutils-8.30/gt-selinux.sh.VUAX
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-selinux.sh.VUAX'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-selinux.sh.VUAX
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-selinux.sh.VUAX
++ cd /sources/coreutils-8.30/gt-selinux.sh.VUAX
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ mkdir mkfifo mknod
+ require_built_ mkdir mkfifo mknod
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ for i in "$@"
+ case " $built_programs " in
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env mkdir --version
mkdir (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by David MacKenzie.
+ for i in $*
+ env mkfifo --version
mkfifo (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by David MacKenzie.
+ for i in $*
+ env mknod --version
mknod (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by David MacKenzie.
+ require_selinux_enforcing_
+ require_selinux_
+ grep 'selinuxfs$' /proc/filesystems
+ skip_ 'this system lacks SELinux support'
+ warn_ 'selinux.sh: skipped test: this system lacks SELinux support'
+ case $IFS in
+ printf '%s\n' 'selinux.sh: skipped test: this system lacks SELinux support'
selinux.sh: skipped test: this system lacks SELinux support
+ test 9 = 2
+ printf '%s\n' 'selinux.sh: skipped test: this system lacks SELinux support'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-selinux.sh.VUAX
+ rm -rf /sources/coreutils-8.30/gt-selinux.sh.VUAX
+ exit 77
SKIP tests/mkdir/selinux.sh (exit status: 77)

SKIP: tests/mkdir/restorecon
============================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-restorecon.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-restorecon.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-restorecon.sh.1vh0
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-restorecon.sh.1vh0
++++ ls -dgo /sources/coreutils-8.30/gt-restorecon.sh.1vh0
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-restorecon.sh.1vh0'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-restorecon.sh.1vh0
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-restorecon.sh.1vh0
++ cd /sources/coreutils-8.30/gt-restorecon.sh.1vh0
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ mkdir mknod mkfifo
+ require_built_ mkdir mknod mkfifo
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ for i in "$@"
+ case " $built_programs " in
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env mkdir --version
mkdir (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by David MacKenzie.
+ for i in $*
+ env mknod --version
mknod (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by David MacKenzie.
+ for i in $*
+ env mkfifo --version
mkfifo (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by David MacKenzie.
+ require_selinux_
+ grep 'selinuxfs$' /proc/filesystems
+ skip_ 'this system lacks SELinux support'
+ warn_ 'restorecon.sh: skipped test: this system lacks SELinux support'
+ case $IFS in
+ printf '%s\n' 'restorecon.sh: skipped test: this system lacks SELinux support'
restorecon.sh: skipped test: this system lacks SELinux support
+ test 9 = 2
+ printf '%s\n' 'restorecon.sh: skipped test: this system lacks SELinux support'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-restorecon.sh.1vh0
+ rm -rf /sources/coreutils-8.30/gt-restorecon.sh.1vh0
+ exit 77
SKIP tests/mkdir/restorecon.sh (exit status: 77)

SKIP: tests/mkdir/smack-no-root
===============================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-smack-no-root.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-smack-no-root.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-smack-no-root.sh.lyhc
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-smack-no-root.sh.lyhc
++++ ls -dgo /sources/coreutils-8.30/gt-smack-no-root.sh.lyhc
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-smack-no-root.sh.lyhc'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-smack-no-root.sh.lyhc
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-smack-no-root.sh.lyhc
++ cd /sources/coreutils-8.30/gt-smack-no-root.sh.lyhc
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ mkdir mkfifo mknod
+ require_built_ mkdir mkfifo mknod
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ for i in "$@"
+ case " $built_programs " in
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env mkdir --version
mkdir (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by David MacKenzie.
+ for i in $*
+ env mkfifo --version
mkfifo (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by David MacKenzie.
+ for i in $*
+ env mknod --version
mknod (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by David MacKenzie.
+ require_smack_
+ grep 'smackfs$' /proc/filesystems
+ skip_ 'this system lacks SMACK support'
+ warn_ 'smack-no-root.sh: skipped test: this system lacks SMACK support'
+ case $IFS in
+ printf '%s\n' 'smack-no-root.sh: skipped test: this system lacks SMACK support'
smack-no-root.sh: skipped test: this system lacks SMACK support
+ test 9 = 2
+ sed 1q
+ printf '%s\n' 'smack-no-root.sh: skipped test: this system lacks SMACK support'
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-smack-no-root.sh.lyhc
+ rm -rf /sources/coreutils-8.30/gt-smack-no-root.sh.lyhc
+ exit 77
SKIP tests/mkdir/smack-no-root.sh (exit status: 77)

SKIP: tests/mv/acl
==================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-acl.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-acl.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-acl.sh.lqaT
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-acl.sh.lqaT
++++ ls -dgo /sources/coreutils-8.30/gt-acl.sh.lqaT
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-acl.sh.lqaT'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-acl.sh.lqaT
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-acl.sh.lqaT
++ cd /sources/coreutils-8.30/gt-acl.sh.lqaT
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ mv
+ require_built_ mv
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env mv --version
mv (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Mike Parker, David MacKenzie, and Jim Meyering.
+ require_acl_
+ getfacl --version
+ setfacl --version
+ id -u bin
+ grep '^#define USE_ACL 1' /sources/coreutils-8.30/lib/config.h
+ . /sources/coreutils-8.30/tests/other-fs-tmpdir
++ test '' = set
++ CANDIDATE_TMP_DIRS='/tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null'
++ other_partition_tmpdir=
+++ stat -c %d .
++ dot_mount_point=1797
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /tmp
+++ stat -L -c %d /tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /tmp
+++ stat -L -c %d /tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /dev/shm
+++ stat -L -c %d /dev/shm
++ d_mount_point=6
++ test x6 = x1797
++ mkdir /dev/shm/tmp65588
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /var/tmp
+++ stat -L -c %d /var/tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /usr/tmp
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /dev/null
++ continue
++ test -z ''
++ skip_ 'requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ warn_ 'acl.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ case $IFS in
++ printf '%s\n' 'acl.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
acl.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn't find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.
++ test 9 = 2
++ sed 1q
++ printf '%s\n' 'acl.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ Exit 77
++ set +e
++ exit 77
++ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ rm -rf ''
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-acl.sh.lqaT
+ rm -rf /sources/coreutils-8.30/gt-acl.sh.lqaT
+ exit 77
SKIP tests/mv/acl.sh (exit status: 77)

SKIP: tests/mv/atomic
=====================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-atomic.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-atomic.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-atomic.sh.uUOg
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-atomic.sh.uUOg
++++ ls -dgo /sources/coreutils-8.30/gt-atomic.sh.uUOg
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-atomic.sh.uUOg'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-atomic.sh.uUOg
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-atomic.sh.uUOg
++ cd /sources/coreutils-8.30/gt-atomic.sh.uUOg
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ mv
+ require_built_ mv
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env mv --version
mv (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Mike Parker, David MacKenzie, and Jim Meyering.
+ require_strace_ unlink
+ test 1 = 1
+ strace -V
+ skip_ 'no strace program'
+ warn_ 'atomic.sh: skipped test: no strace program'
+ case $IFS in
+ printf '%s\n' 'atomic.sh: skipped test: no strace program'
atomic.sh: skipped test: no strace program
+ test 9 = 2
+ printf '%s\n' 'atomic.sh: skipped test: no strace program'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-atomic.sh.uUOg
+ rm -rf /sources/coreutils-8.30/gt-atomic.sh.uUOg
+ exit 77
SKIP tests/mv/atomic.sh (exit status: 77)

SKIP: tests/mv/atomic2
======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-atomic2.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-atomic2.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-atomic2.sh.FEV2
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-atomic2.sh.FEV2
++++ ls -dgo /sources/coreutils-8.30/gt-atomic2.sh.FEV2
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-atomic2.sh.FEV2'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-atomic2.sh.FEV2
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-atomic2.sh.FEV2
++ cd /sources/coreutils-8.30/gt-atomic2.sh.FEV2
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ mv
+ require_built_ mv
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env mv --version
mv (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Mike Parker, David MacKenzie, and Jim Meyering.
+ require_strace_ unlink
+ test 1 = 1
+ strace -V
+ skip_ 'no strace program'
+ warn_ 'atomic2.sh: skipped test: no strace program'
+ case $IFS in
+ printf '%s\n' 'atomic2.sh: skipped test: no strace program'
atomic2.sh: skipped test: no strace program
+ test 9 = 2
+ printf '%s\n' 'atomic2.sh: skipped test: no strace program'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-atomic2.sh.FEV2
+ rm -rf /sources/coreutils-8.30/gt-atomic2.sh.FEV2
+ exit 77
SKIP tests/mv/atomic2.sh (exit status: 77)

SKIP: tests/mv/backup-is-src
============================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-backup-is-src.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-backup-is-src.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-backup-is-src.sh.XdJ5
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-backup-is-src.sh.XdJ5
++++ ls -dgo /sources/coreutils-8.30/gt-backup-is-src.sh.XdJ5
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-backup-is-src.sh.XdJ5'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-backup-is-src.sh.XdJ5
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-backup-is-src.sh.XdJ5
++ cd /sources/coreutils-8.30/gt-backup-is-src.sh.XdJ5
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ mv
+ require_built_ mv
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env mv --version
mv (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Mike Parker, David MacKenzie, and Jim Meyering.
+ . /sources/coreutils-8.30/tests/other-fs-tmpdir
++ test '' = set
++ CANDIDATE_TMP_DIRS='/tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null'
++ other_partition_tmpdir=
+++ stat -c %d .
++ dot_mount_point=1797
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /tmp
+++ stat -L -c %d /tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /tmp
+++ stat -L -c %d /tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /dev/shm
+++ stat -L -c %d /dev/shm
++ d_mount_point=6
++ test x6 = x1797
++ mkdir /dev/shm/tmp65833
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /var/tmp
+++ stat -L -c %d /var/tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /usr/tmp
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /dev/null
++ continue
++ test -z ''
++ skip_ 'requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ warn_ 'backup-is-src.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ case $IFS in
++ printf '%s\n' 'backup-is-src.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
backup-is-src.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn't find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.
++ test 9 = 2
++ printf '%s\n' 'backup-is-src.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ sed 1q
++ Exit 77
++ set +e
++ exit 77
++ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ rm -rf ''
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-backup-is-src.sh.XdJ5
+ rm -rf /sources/coreutils-8.30/gt-backup-is-src.sh.XdJ5
+ exit 77
SKIP tests/mv/backup-is-src.sh (exit status: 77)

SKIP: tests/mv/hard-link-1
==========================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-hard-link-1.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-hard-link-1.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-hard-link-1.sh.DicD
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-hard-link-1.sh.DicD
++++ ls -dgo /sources/coreutils-8.30/gt-hard-link-1.sh.DicD
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-hard-link-1.sh.DicD'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-hard-link-1.sh.DicD
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-hard-link-1.sh.DicD
++ cd /sources/coreutils-8.30/gt-hard-link-1.sh.DicD
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ mv
+ require_built_ mv
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env mv --version
mv (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Mike Parker, David MacKenzie, and Jim Meyering.
+ . /sources/coreutils-8.30/tests/other-fs-tmpdir
++ test '' = set
++ CANDIDATE_TMP_DIRS='/tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null'
++ other_partition_tmpdir=
+++ stat -c %d .
++ dot_mount_point=1797
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /tmp
+++ stat -L -c %d /tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /tmp
+++ stat -L -c %d /tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /dev/shm
+++ stat -L -c %d /dev/shm
++ d_mount_point=6
++ test x6 = x1797
++ mkdir /dev/shm/tmp66532
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /var/tmp
+++ stat -L -c %d /var/tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /usr/tmp
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /dev/null
++ continue
++ test -z ''
++ skip_ 'requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ warn_ 'hard-link-1.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ case $IFS in
++ printf '%s\n' 'hard-link-1.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
hard-link-1.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn't find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.
++ test 9 = 2
++ sed 1q
++ printf '%s\n' 'hard-link-1.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ Exit 77
++ set +e
++ exit 77
++ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ rm -rf ''
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-hard-link-1.sh.DicD
+ rm -rf /sources/coreutils-8.30/gt-hard-link-1.sh.DicD
+ exit 77
SKIP tests/mv/hard-link-1.sh (exit status: 77)

SKIP: tests/mv/i-3
==================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-i-3.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-i-3.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-i-3.sh.nCSB
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-i-3.sh.nCSB
++++ ls -dgo /sources/coreutils-8.30/gt-i-3.sh.nCSB
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-i-3.sh.nCSB'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-i-3.sh.nCSB
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-i-3.sh.nCSB
++ cd /sources/coreutils-8.30/gt-i-3.sh.nCSB
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ mv
+ require_built_ mv
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env mv --version
mv (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Mike Parker, David MacKenzie, and Jim Meyering.
+ require_controlling_input_terminal_
+ have_input_tty=yes
+ tty -s
+ test -t 0
+ test yes = no
+ skip_if_root_
+ uid_is_privileged_
++ id -u
+ my_uid=99
+ case $my_uid in
+ return 1
+ trap '' TTIN
+ uname -s
+ grep 'BSD$'
+ touch f g h i
+ chmod 0 g i
+ ls /dev/stdin
++ readlink -f /dev/stdin
+ tty=/dev/pts/4
+ test -r /dev/pts/4
+ skip_ '/dev/stdin is not readable'
+ warn_ 'i-3.sh: skipped test: /dev/stdin is not readable'
+ case $IFS in
+ printf '%s\n' 'i-3.sh: skipped test: /dev/stdin is not readable'
i-3.sh: skipped test: /dev/stdin is not readable
+ test 9 = 2
+ sed 1q
+ printf '%s\n' 'i-3.sh: skipped test: /dev/stdin is not readable'
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-i-3.sh.nCSB
+ rm -rf /sources/coreutils-8.30/gt-i-3.sh.nCSB
+ exit 77
SKIP tests/mv/i-3.sh (exit status: 77)

SKIP: tests/mv/into-self-2
==========================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-into-self-2.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-into-self-2.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-into-self-2.sh.j22C
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-into-self-2.sh.j22C
++++ ls -dgo /sources/coreutils-8.30/gt-into-self-2.sh.j22C
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-into-self-2.sh.j22C'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-into-self-2.sh.j22C
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-into-self-2.sh.j22C
++ cd /sources/coreutils-8.30/gt-into-self-2.sh.j22C
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ mv
+ require_built_ mv
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env mv --version
mv (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Mike Parker, David MacKenzie, and Jim Meyering.
+ . /sources/coreutils-8.30/tests/other-fs-tmpdir
++ test '' = set
++ CANDIDATE_TMP_DIRS='/tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null'
++ other_partition_tmpdir=
+++ stat -c %d .
++ dot_mount_point=1797
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /tmp
+++ stat -L -c %d /tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /tmp
+++ stat -L -c %d /tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /dev/shm
+++ stat -L -c %d /dev/shm
++ d_mount_point=6
++ test x6 = x1797
++ mkdir /dev/shm/tmp66990
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /var/tmp
+++ stat -L -c %d /var/tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /usr/tmp
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /dev/null
++ continue
++ test -z ''
++ skip_ 'requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ warn_ 'into-self-2.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ case $IFS in
++ printf '%s\n' 'into-self-2.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
into-self-2.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn't find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.
++ test 9 = 2
++ printf '%s\n' 'into-self-2.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ sed 1q
++ Exit 77
++ set +e
++ exit 77
++ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ rm -rf ''
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-into-self-2.sh.j22C
+ rm -rf /sources/coreutils-8.30/gt-into-self-2.sh.j22C
+ exit 77
SKIP tests/mv/into-self-2.sh (exit status: 77)

SKIP: tests/mv/leak-fd
======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-leak-fd.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-leak-fd.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-leak-fd.sh.yXxz
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-leak-fd.sh.yXxz
++++ ls -dgo /sources/coreutils-8.30/gt-leak-fd.sh.yXxz
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-leak-fd.sh.yXxz'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-leak-fd.sh.yXxz
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-leak-fd.sh.yXxz
++ cd /sources/coreutils-8.30/gt-leak-fd.sh.yXxz
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ mv
+ require_built_ mv
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env mv --version
mv (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Mike Parker, David MacKenzie, and Jim Meyering.
+ skip_if_root_
+ uid_is_privileged_
++ id -u
+ my_uid=99
+ case $my_uid in
+ return 1
+ . /sources/coreutils-8.30/tests/other-fs-tmpdir
++ test '' = set
++ CANDIDATE_TMP_DIRS='/tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null'
++ other_partition_tmpdir=
+++ stat -c %d .
++ dot_mount_point=1797
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /tmp
+++ stat -L -c %d /tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /tmp
+++ stat -L -c %d /tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /dev/shm
+++ stat -L -c %d /dev/shm
++ d_mount_point=6
++ test x6 = x1797
++ mkdir /dev/shm/tmp67174
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /var/tmp
+++ stat -L -c %d /var/tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /usr/tmp
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /dev/null
++ continue
++ test -z ''
++ skip_ 'requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ warn_ 'leak-fd.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ case $IFS in
++ printf '%s\n' 'leak-fd.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
leak-fd.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn't find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.
++ test 9 = 2
++ printf '%s\n' 'leak-fd.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
++ sed 1q
this test use a different list.'
++ Exit 77
++ set +e
++ exit 77
++ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ rm -rf ''
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-leak-fd.sh.yXxz
+ rm -rf /sources/coreutils-8.30/gt-leak-fd.sh.yXxz
+ exit 77
SKIP tests/mv/leak-fd.sh (exit status: 77)

SKIP: tests/mv/mv-special-1
===========================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-mv-special-1.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-mv-special-1.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-mv-special-1.sh.8n5V
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-mv-special-1.sh.8n5V
++++ ls -dgo /sources/coreutils-8.30/gt-mv-special-1.sh.8n5V
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-mv-special-1.sh.8n5V'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-mv-special-1.sh.8n5V
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-mv-special-1.sh.8n5V
++ cd /sources/coreutils-8.30/gt-mv-special-1.sh.8n5V
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ mv
+ require_built_ mv
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env mv --version
mv (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Mike Parker, David MacKenzie, and Jim Meyering.
+ . /sources/coreutils-8.30/tests/other-fs-tmpdir
++ test '' = set
++ CANDIDATE_TMP_DIRS='/tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null'
++ other_partition_tmpdir=
+++ stat -c %d .
++ dot_mount_point=1797
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /tmp
+++ stat -L -c %d /tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /tmp
+++ stat -L -c %d /tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /dev/shm
+++ stat -L -c %d /dev/shm
++ d_mount_point=6
++ test x6 = x1797
++ mkdir /dev/shm/tmp67320
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /var/tmp
+++ stat -L -c %d /var/tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /usr/tmp
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /dev/null
++ continue
++ test -z ''
++ skip_ 'requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ warn_ 'mv-special-1.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ case $IFS in
++ printf '%s\n' 'mv-special-1.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
mv-special-1.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn't find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.
++ test 9 = 2
++ printf '%s\n' 'mv-special-1.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ sed 1q
++ Exit 77
++ set +e
++ exit 77
++ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ rm -rf ''
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-mv-special-1.sh.8n5V
+ rm -rf /sources/coreutils-8.30/gt-mv-special-1.sh.8n5V
+ exit 77
SKIP tests/mv/mv-special-1.sh (exit status: 77)

SKIP: tests/mv/part-fail
========================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-part-fail.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-part-fail.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-part-fail.sh.q5pr
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-part-fail.sh.q5pr
++++ ls -dgo /sources/coreutils-8.30/gt-part-fail.sh.q5pr
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-part-fail.sh.q5pr'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-part-fail.sh.q5pr
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-part-fail.sh.q5pr
++ cd /sources/coreutils-8.30/gt-part-fail.sh.q5pr
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ mv
+ require_built_ mv
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env mv --version
mv (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Mike Parker, David MacKenzie, and Jim Meyering.
+ skip_if_root_
+ uid_is_privileged_
++ id -u
+ my_uid=99
+ case $my_uid in
+ return 1
+ . /sources/coreutils-8.30/tests/other-fs-tmpdir
++ test '' = set
++ CANDIDATE_TMP_DIRS='/tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null'
++ other_partition_tmpdir=
+++ stat -c %d .
++ dot_mount_point=1797
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /tmp
+++ stat -L -c %d /tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /tmp
+++ stat -L -c %d /tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /dev/shm
+++ stat -L -c %d /dev/shm
++ d_mount_point=6
++ test x6 = x1797
++ mkdir /dev/shm/tmp67450
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /var/tmp
+++ stat -L -c %d /var/tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /usr/tmp
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /dev/null
++ continue
++ test -z ''
++ skip_ 'requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ warn_ 'part-fail.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ case $IFS in
++ printf '%s\n' 'part-fail.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
part-fail.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn't find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.
++ test 9 = 2
++ printf '%s\n' 'part-fail.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ sed 1q
++ Exit 77
++ set +e
++ exit 77
++ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ t=
+ chmod -R 700 ''
chmod: cannot access '': No such file or directory
+ rm -rf ''
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-part-fail.sh.q5pr
+ rm -rf /sources/coreutils-8.30/gt-part-fail.sh.q5pr
+ exit 77
SKIP tests/mv/part-fail.sh (exit status: 77)

SKIP: tests/mv/part-hardlink
============================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-part-hardlink.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-part-hardlink.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-part-hardlink.sh.Bg9S
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-part-hardlink.sh.Bg9S
++++ ls -dgo /sources/coreutils-8.30/gt-part-hardlink.sh.Bg9S
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-part-hardlink.sh.Bg9S'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-part-hardlink.sh.Bg9S
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-part-hardlink.sh.Bg9S
++ cd /sources/coreutils-8.30/gt-part-hardlink.sh.Bg9S
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ mv
+ require_built_ mv
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env mv --version
mv (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Mike Parker, David MacKenzie, and Jim Meyering.
+ . /sources/coreutils-8.30/tests/other-fs-tmpdir
++ test '' = set
++ CANDIDATE_TMP_DIRS='/tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null'
++ other_partition_tmpdir=
+++ stat -c %d .
++ dot_mount_point=1797
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /tmp
+++ stat -L -c %d /tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /tmp
+++ stat -L -c %d /tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /dev/shm
+++ stat -L -c %d /dev/shm
++ d_mount_point=6
++ test x6 = x1797
++ mkdir /dev/shm/tmp67520
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /var/tmp
+++ stat -L -c %d /var/tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /usr/tmp
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /dev/null
++ continue
++ test -z ''
++ skip_ 'requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ warn_ 'part-hardlink.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ case $IFS in
++ printf '%s\n' 'part-hardlink.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
part-hardlink.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn't find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.
++ test 9 = 2
++ printf '%s\n' 'part-hardlink.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ sed 1q
++ Exit 77
++ set +e
++ exit 77
++ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ rm -rf ''
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-part-hardlink.sh.Bg9S
+ rm -rf /sources/coreutils-8.30/gt-part-hardlink.sh.Bg9S
+ exit 77
SKIP tests/mv/part-hardlink.sh (exit status: 77)

SKIP: tests/mv/part-rename
==========================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-part-rename.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-part-rename.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-part-rename.sh.smU8
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-part-rename.sh.smU8
++++ ls -dgo /sources/coreutils-8.30/gt-part-rename.sh.smU8
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-part-rename.sh.smU8'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-part-rename.sh.smU8
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-part-rename.sh.smU8
++ cd /sources/coreutils-8.30/gt-part-rename.sh.smU8
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ mv
+ require_built_ mv
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env mv --version
mv (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Mike Parker, David MacKenzie, and Jim Meyering.
+ . /sources/coreutils-8.30/tests/other-fs-tmpdir
++ test '' = set
++ CANDIDATE_TMP_DIRS='/tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null'
++ other_partition_tmpdir=
+++ stat -c %d .
++ dot_mount_point=1797
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /tmp
+++ stat -L -c %d /tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /tmp
+++ stat -L -c %d /tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /dev/shm
+++ stat -L -c %d /dev/shm
++ d_mount_point=6
++ test x6 = x1797
++ mkdir /dev/shm/tmp67588
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /var/tmp
+++ stat -L -c %d /var/tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /usr/tmp
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /dev/null
++ continue
++ test -z ''
++ skip_ 'requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ warn_ 'part-rename.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ case $IFS in
++ printf '%s\n' 'part-rename.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
part-rename.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn't find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.
++ test 9 = 2
++ printf '%s\n' 'part-rename.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ sed 1q
++ Exit 77
++ set +e
++ exit 77
++ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ rm -rf ''
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-part-rename.sh.smU8
+ rm -rf /sources/coreutils-8.30/gt-part-rename.sh.smU8
+ exit 77
SKIP tests/mv/part-rename.sh (exit status: 77)

SKIP: tests/mv/part-symlink
===========================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-part-symlink.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-part-symlink.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-part-symlink.sh.H7GS
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-part-symlink.sh.H7GS
++++ ls -dgo /sources/coreutils-8.30/gt-part-symlink.sh.H7GS
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-part-symlink.sh.H7GS'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-part-symlink.sh.H7GS
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-part-symlink.sh.H7GS
++ cd /sources/coreutils-8.30/gt-part-symlink.sh.H7GS
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ cp mv
+ require_built_ cp mv
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env cp --version
cp (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Torbjorn Granlund, David MacKenzie, and Jim Meyering.
+ for i in $*
+ env mv --version
mv (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Mike Parker, David MacKenzie, and Jim Meyering.
+ . /sources/coreutils-8.30/tests/other-fs-tmpdir
++ test '' = set
++ CANDIDATE_TMP_DIRS='/tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null'
++ other_partition_tmpdir=
+++ stat -c %d .
++ dot_mount_point=1797
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /tmp
+++ stat -L -c %d /tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /tmp
+++ stat -L -c %d /tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /dev/shm
+++ stat -L -c %d /dev/shm
++ d_mount_point=6
++ test x6 = x1797
++ mkdir /dev/shm/tmp67656
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /var/tmp
+++ stat -L -c %d /var/tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /usr/tmp
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /dev/null
++ continue
++ test -z ''
++ skip_ 'requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ warn_ 'part-symlink.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ case $IFS in
++ printf '%s\n' 'part-symlink.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
part-symlink.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn't find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.
++ test 9 = 2
++ sed 1q
++ printf '%s\n' 'part-symlink.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ Exit 77
++ set +e
++ exit 77
++ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ rm -rf ''
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-part-symlink.sh.H7GS
+ rm -rf /sources/coreutils-8.30/gt-part-symlink.sh.H7GS
+ exit 77
SKIP tests/mv/part-symlink.sh (exit status: 77)

SKIP: tests/mv/partition-perm
=============================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-partition-perm.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-partition-perm.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-partition-perm.sh.hJud
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-partition-perm.sh.hJud
++++ ls -dgo /sources/coreutils-8.30/gt-partition-perm.sh.hJud
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-partition-perm.sh.hJud'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-partition-perm.sh.hJud
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-partition-perm.sh.hJud
++ cd /sources/coreutils-8.30/gt-partition-perm.sh.hJud
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ mv
+ require_built_ mv
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env mv --version
mv (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Mike Parker, David MacKenzie, and Jim Meyering.
+ . /sources/coreutils-8.30/tests/other-fs-tmpdir
++ test '' = set
++ CANDIDATE_TMP_DIRS='/tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null'
++ other_partition_tmpdir=
+++ stat -c %d .
++ dot_mount_point=1797
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /tmp
+++ stat -L -c %d /tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /tmp
+++ stat -L -c %d /tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /dev/shm
+++ stat -L -c %d /dev/shm
++ d_mount_point=6
++ test x6 = x1797
++ mkdir /dev/shm/tmp67725
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /var/tmp
+++ stat -L -c %d /var/tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /usr/tmp
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /dev/null
++ continue
++ test -z ''
++ skip_ 'requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ warn_ 'partition-perm.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ case $IFS in
++ printf '%s\n' 'partition-perm.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
partition-perm.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn't find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.
++ test 9 = 2
++ printf '%s\n' 'partition-perm.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ sed 1q
++ Exit 77
++ set +e
++ exit 77
++ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ rm -rf ''
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-partition-perm.sh.hJud
+ rm -rf /sources/coreutils-8.30/gt-partition-perm.sh.hJud
+ exit 77
SKIP tests/mv/partition-perm.sh (exit status: 77)

SKIP: tests/mv/to-symlink
=========================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-to-symlink.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-to-symlink.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-to-symlink.sh.uXf6
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-to-symlink.sh.uXf6
++++ ls -dgo /sources/coreutils-8.30/gt-to-symlink.sh.uXf6
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-to-symlink.sh.uXf6'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-to-symlink.sh.uXf6
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-to-symlink.sh.uXf6
++ cd /sources/coreutils-8.30/gt-to-symlink.sh.uXf6
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ mv
+ require_built_ mv
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env mv --version
mv (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Mike Parker, David MacKenzie, and Jim Meyering.
+ . /sources/coreutils-8.30/tests/other-fs-tmpdir
++ test '' = set
++ CANDIDATE_TMP_DIRS='/tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null'
++ other_partition_tmpdir=
+++ stat -c %d .
++ dot_mount_point=1797
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /tmp
+++ stat -L -c %d /tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /tmp
+++ stat -L -c %d /tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /dev/shm
+++ stat -L -c %d /dev/shm
++ d_mount_point=6
++ test x6 = x1797
++ mkdir /dev/shm/tmp67974
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /var/tmp
+++ stat -L -c %d /var/tmp
++ d_mount_point=1797
++ test x1797 = x1797
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /usr/tmp
++ continue
++ for d in $CANDIDATE_TMP_DIRS
++ test -d /dev/null
++ continue
++ test -z ''
++ skip_ 'requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ warn_ 'to-symlink.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ case $IFS in
++ printf '%s\n' 'to-symlink.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
to-symlink.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn't find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.
++ test 9 = 2
++ printf '%s\n' 'to-symlink.sh: skipped test: requires a writable directory on a different disk partition,
and I couldn'\''t find one.  I tried these:
  /tmp /tmp /dev/shm /var/tmp /usr/tmp /dev/null
Set your environment variable CANDIDATE_TMP_DIRS to make
this test use a different list.'
++ sed 1q
++ Exit 77
++ set +e
++ exit 77
++ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ rm -rf ''
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-to-symlink.sh.uXf6
+ rm -rf /sources/coreutils-8.30/gt-to-symlink.sh.uXf6
+ exit 77
SKIP tests/mv/to-symlink.sh (exit status: 77)

SKIP: tests/chown/basic
=======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-basic.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-basic.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-basic.sh.yejI
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-basic.sh.yejI
++++ ls -dgo /sources/coreutils-8.30/gt-basic.sh.yejI
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-basic.sh.yejI'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-basic.sh.yejI
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-basic.sh.yejI
++ cd /sources/coreutils-8.30/gt-basic.sh.yejI
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ chown
+ require_built_ chown
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env chown --version
chown (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by David MacKenzie and Jim Meyering.
+ require_root_
+ uid_is_privileged_
++ id -u
+ my_uid=99
+ case $my_uid in
+ return 1
+ skip_ 'must be run as root'
+ warn_ 'basic.sh: skipped test: must be run as root'
+ case $IFS in
+ printf '%s\n' 'basic.sh: skipped test: must be run as root'
basic.sh: skipped test: must be run as root
+ test 9 = 2
+ printf '%s\n' 'basic.sh: skipped test: must be run as root'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-basic.sh.yejI
+ rm -rf /sources/coreutils-8.30/gt-basic.sh.yejI
+ exit 77
SKIP tests/chown/basic.sh (exit status: 77)

SKIP: tests/cp/cp-a-selinux
===========================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-cp-a-selinux.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-cp-a-selinux.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-cp-a-selinux.sh.nzSF
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-cp-a-selinux.sh.nzSF
++++ ls -dgo /sources/coreutils-8.30/gt-cp-a-selinux.sh.nzSF
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-cp-a-selinux.sh.nzSF'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-cp-a-selinux.sh.nzSF
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-cp-a-selinux.sh.nzSF
++ cd /sources/coreutils-8.30/gt-cp-a-selinux.sh.nzSF
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ cp
+ require_built_ cp
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env cp --version
cp (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Torbjorn Granlund, David MacKenzie, and Jim Meyering.
+ require_root_
+ uid_is_privileged_
++ id -u
+ my_uid=99
+ case $my_uid in
+ return 1
+ skip_ 'must be run as root'
+ warn_ 'cp-a-selinux.sh: skipped test: must be run as root'
+ case $IFS in
+ printf '%s\n' 'cp-a-selinux.sh: skipped test: must be run as root'
cp-a-selinux.sh: skipped test: must be run as root
+ test 9 = 2
+ printf '%s\n' 'cp-a-selinux.sh: skipped test: must be run as root'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-cp-a-selinux.sh.nzSF
+ rm -rf /sources/coreutils-8.30/gt-cp-a-selinux.sh.nzSF
+ exit 77
SKIP tests/cp/cp-a-selinux.sh (exit status: 77)

SKIP: tests/cp/preserve-gid
===========================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-preserve-gid.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-preserve-gid.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-preserve-gid.sh.2e9g
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-preserve-gid.sh.2e9g
++++ ls -dgo /sources/coreutils-8.30/gt-preserve-gid.sh.2e9g
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-preserve-gid.sh.2e9g'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-preserve-gid.sh.2e9g
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-preserve-gid.sh.2e9g
++ cd /sources/coreutils-8.30/gt-preserve-gid.sh.2e9g
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ cp
+ require_built_ cp
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env cp --version
cp (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Torbjorn Granlund, David MacKenzie, and Jim Meyering.
+ require_perl_
+ : perl
+ perl -e 'use warnings'
+ require_root_
+ uid_is_privileged_
++ id -u
+ my_uid=99
+ case $my_uid in
+ return 1
+ skip_ 'must be run as root'
+ warn_ 'preserve-gid.sh: skipped test: must be run as root'
+ case $IFS in
+ printf '%s\n' 'preserve-gid.sh: skipped test: must be run as root'
preserve-gid.sh: skipped test: must be run as root
+ test 9 = 2
+ sed 1q
+ printf '%s\n' 'preserve-gid.sh: skipped test: must be run as root'
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-preserve-gid.sh.2e9g
+ rm -rf /sources/coreutils-8.30/gt-preserve-gid.sh.2e9g
+ exit 77
SKIP tests/cp/preserve-gid.sh (exit status: 77)

SKIP: tests/cp/special-bits
===========================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-special-bits.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-special-bits.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-special-bits.sh.Y47I
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-special-bits.sh.Y47I
++++ ls -dgo /sources/coreutils-8.30/gt-special-bits.sh.Y47I
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-special-bits.sh.Y47I'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-special-bits.sh.Y47I
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-special-bits.sh.Y47I
++ cd /sources/coreutils-8.30/gt-special-bits.sh.Y47I
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ cp
+ require_built_ cp
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env cp --version
cp (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Torbjorn Granlund, David MacKenzie, and Jim Meyering.
+ require_root_
+ uid_is_privileged_
++ id -u
+ my_uid=99
+ case $my_uid in
+ return 1
+ skip_ 'must be run as root'
+ warn_ 'special-bits.sh: skipped test: must be run as root'
+ case $IFS in
+ printf '%s\n' 'special-bits.sh: skipped test: must be run as root'
special-bits.sh: skipped test: must be run as root
+ test 9 = 2
+ printf '%s\n' 'special-bits.sh: skipped test: must be run as root'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-special-bits.sh.Y47I
+ rm -rf /sources/coreutils-8.30/gt-special-bits.sh.Y47I
+ exit 77
SKIP tests/cp/special-bits.sh (exit status: 77)

SKIP: tests/cp/cp-mv-enotsup-xattr
==================================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-cp-mv-enotsup-xattr.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-cp-mv-enotsup-xattr.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-cp-mv-enotsup-xattr.sh.0PeP
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-cp-mv-enotsup-xattr.sh.0PeP
++++ ls -dgo /sources/coreutils-8.30/gt-cp-mv-enotsup-xattr.sh.0PeP
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-cp-mv-enotsup-xattr.sh.0PeP'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-cp-mv-enotsup-xattr.sh.0PeP
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-cp-mv-enotsup-xattr.sh.0PeP
++ cd /sources/coreutils-8.30/gt-cp-mv-enotsup-xattr.sh.0PeP
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ cp mv
+ require_built_ cp mv
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env cp --version
cp (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Torbjorn Granlund, David MacKenzie, and Jim Meyering.
+ for i in $*
+ env mv --version
mv (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Mike Parker, David MacKenzie, and Jim Meyering.
+ require_root_
+ uid_is_privileged_
++ id -u
+ my_uid=99
+ case $my_uid in
+ return 1
+ skip_ 'must be run as root'
+ warn_ 'cp-mv-enotsup-xattr.sh: skipped test: must be run as root'
+ case $IFS in
+ printf '%s\n' 'cp-mv-enotsup-xattr.sh: skipped test: must be run as root'
cp-mv-enotsup-xattr.sh: skipped test: must be run as root
+ test 9 = 2
+ printf '%s\n' 'cp-mv-enotsup-xattr.sh: skipped test: must be run as root'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-cp-mv-enotsup-xattr.sh.0PeP
+ rm -rf /sources/coreutils-8.30/gt-cp-mv-enotsup-xattr.sh.0PeP
+ exit 77
SKIP tests/cp/cp-mv-enotsup-xattr.sh (exit status: 77)

SKIP: tests/cp/capability
=========================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-capability.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-capability.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-capability.sh.anIL
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-capability.sh.anIL
++++ ls -dgo /sources/coreutils-8.30/gt-capability.sh.anIL
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-capability.sh.anIL'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-capability.sh.anIL
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-capability.sh.anIL
++ cd /sources/coreutils-8.30/gt-capability.sh.anIL
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ cp
+ require_built_ cp
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env cp --version
cp (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Torbjorn Granlund, David MacKenzie, and Jim Meyering.
+ require_root_
+ uid_is_privileged_
++ id -u
+ my_uid=99
+ case $my_uid in
+ return 1
+ skip_ 'must be run as root'
+ warn_ 'capability.sh: skipped test: must be run as root'
+ case $IFS in
+ printf '%s\n' 'capability.sh: skipped test: must be run as root'
capability.sh: skipped test: must be run as root
+ test 9 = 2
+ printf '%s\n' 'capability.sh: skipped test: must be run as root'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-capability.sh.anIL
+ rm -rf /sources/coreutils-8.30/gt-capability.sh.anIL
+ exit 77
SKIP tests/cp/capability.sh (exit status: 77)

SKIP: tests/cp/sparse-fiemap
============================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-sparse-fiemap.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-sparse-fiemap.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-sparse-fiemap.sh.9rTE
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-sparse-fiemap.sh.9rTE
++++ ls -dgo /sources/coreutils-8.30/gt-sparse-fiemap.sh.9rTE
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-sparse-fiemap.sh.9rTE'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-sparse-fiemap.sh.9rTE
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-sparse-fiemap.sh.9rTE
++ cd /sources/coreutils-8.30/gt-sparse-fiemap.sh.9rTE
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ cp
+ require_built_ cp
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env cp --version
cp (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Torbjorn Granlund, David MacKenzie, and Jim Meyering.
+ require_perl_
+ : perl
+ perl -e 'use warnings'
+ touch fiemap_chk
+ fiemap_capable_ fiemap_chk
+ python
./init.cfg: line 537: python: command not found
+ warn_ 'fiemap_capable_: python missing: assuming not fiemap capable'
+ case $IFS in
+ printf '%s\n' 'fiemap_capable_: python missing: assuming not fiemap capable'
fiemap_capable_: python missing: assuming not fiemap capable
+ test 9 = 2
+ sed 1q
+ printf '%s\n' 'fiemap_capable_: python missing: assuming not fiemap capable'
+ return 1
+ skip_ 'current file system has insufficient FIEMAP support'
+ warn_ 'sparse-fiemap.sh: skipped test: current file system has insufficient FIEMAP support'
+ case $IFS in
+ printf '%s\n' 'sparse-fiemap.sh: skipped test: current file system has insufficient FIEMAP support'
sparse-fiemap.sh: skipped test: current file system has insufficient FIEMAP support
+ test 9 = 2
+ sed 1q
+ printf '%s\n' 'sparse-fiemap.sh: skipped test: current file system has insufficient FIEMAP support'
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-sparse-fiemap.sh.9rTE
+ rm -rf /sources/coreutils-8.30/gt-sparse-fiemap.sh.9rTE
+ exit 77
SKIP tests/cp/sparse-fiemap.sh (exit status: 77)

SKIP: tests/cp/cross-dev-symlink
================================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-cross-dev-symlink.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-cross-dev-symlink.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-cross-dev-symlink.sh.jftv
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-cross-dev-symlink.sh.jftv
++++ ls -dgo /sources/coreutils-8.30/gt-cross-dev-symlink.sh.jftv
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-cross-dev-symlink.sh.jftv'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-cross-dev-symlink.sh.jftv
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-cross-dev-symlink.sh.jftv
++ cd /sources/coreutils-8.30/gt-cross-dev-symlink.sh.jftv
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ cp
+ require_built_ cp
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env cp --version
cp (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Torbjorn Granlund, David MacKenzie, and Jim Meyering.
+ require_root_
+ uid_is_privileged_
++ id -u
+ my_uid=99
+ case $my_uid in
+ return 1
+ skip_ 'must be run as root'
+ warn_ 'cross-dev-symlink.sh: skipped test: must be run as root'
+ case $IFS in
+ printf '%s\n' 'cross-dev-symlink.sh: skipped test: must be run as root'
cross-dev-symlink.sh: skipped test: must be run as root
+ test 9 = 2
+ printf '%s\n' 'cross-dev-symlink.sh: skipped test: must be run as root'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-cross-dev-symlink.sh.jftv
+ rm -rf /sources/coreutils-8.30/gt-cross-dev-symlink.sh.jftv
+ exit 77
SKIP tests/cp/cross-dev-symlink.sh (exit status: 77)

SKIP: tests/dd/skip-seek-past-dev
=================================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-skip-seek-past-dev.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-skip-seek-past-dev.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-skip-seek-past-dev.sh.cvW6
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-skip-seek-past-dev.sh.cvW6
++++ ls -dgo /sources/coreutils-8.30/gt-skip-seek-past-dev.sh.cvW6
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-skip-seek-past-dev.sh.cvW6'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-skip-seek-past-dev.sh.cvW6
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-skip-seek-past-dev.sh.cvW6
++ cd /sources/coreutils-8.30/gt-skip-seek-past-dev.sh.cvW6
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ dd
+ require_built_ dd
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env dd --version
dd (coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Paul Rubin, David MacKenzie, and Stuart Kemp.
+ require_root_
+ uid_is_privileged_
++ id -u
+ my_uid=99
+ case $my_uid in
+ return 1
+ skip_ 'must be run as root'
+ warn_ 'skip-seek-past-dev.sh: skipped test: must be run as root'
+ case $IFS in
+ printf '%s\n' 'skip-seek-past-dev.sh: skipped test: must be run as root'
skip-seek-past-dev.sh: skipped test: must be run as root
+ test 9 = 2
+ printf '%s\n' 'skip-seek-past-dev.sh: skipped test: must be run as root'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-skip-seek-past-dev.sh.cvW6
+ rm -rf /sources/coreutils-8.30/gt-skip-seek-past-dev.sh.cvW6
+ exit 77
SKIP tests/dd/skip-seek-past-dev.sh (exit status: 77)

SKIP: tests/df/problematic-chars
================================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-problematic-chars.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-problematic-chars.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-problematic-chars.sh.Hm3F
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-problematic-chars.sh.Hm3F
++++ ls -dgo /sources/coreutils-8.30/gt-problematic-chars.sh.Hm3F
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-problematic-chars.sh.Hm3F'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-problematic-chars.sh.Hm3F
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-problematic-chars.sh.Hm3F
++ cd /sources/coreutils-8.30/gt-problematic-chars.sh.Hm3F
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ df
+ require_built_ df
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env df --version
df (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Torbjorn Granlund, David MacKenzie, and Paul Eggert.
+ require_root_
+ uid_is_privileged_
++ id -u
+ my_uid=99
+ case $my_uid in
+ return 1
+ skip_ 'must be run as root'
+ warn_ 'problematic-chars.sh: skipped test: must be run as root'
+ case $IFS in
+ printf '%s\n' 'problematic-chars.sh: skipped test: must be run as root'
problematic-chars.sh: skipped test: must be run as root
+ test 9 = 2
+ printf '%s\n' 'problematic-chars.sh: skipped test: must be run as root'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-problematic-chars.sh.Hm3F
+ rm -rf /sources/coreutils-8.30/gt-problematic-chars.sh.Hm3F
+ exit 77
SKIP tests/df/problematic-chars.sh (exit status: 77)

SKIP: tests/df/over-mount-device
================================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-over-mount-device.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-over-mount-device.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-over-mount-device.sh.1Css
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-over-mount-device.sh.1Css
++++ ls -dgo /sources/coreutils-8.30/gt-over-mount-device.sh.1Css
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-over-mount-device.sh.1Css'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-over-mount-device.sh.1Css
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-over-mount-device.sh.1Css
++ cd /sources/coreutils-8.30/gt-over-mount-device.sh.1Css
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ df
+ require_built_ df
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env df --version
df (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Torbjorn Granlund, David MacKenzie, and Paul Eggert.
+ require_root_
+ uid_is_privileged_
++ id -u
+ my_uid=99
+ case $my_uid in
+ return 1
+ skip_ 'must be run as root'
+ warn_ 'over-mount-device.sh: skipped test: must be run as root'
+ case $IFS in
+ printf '%s\n' 'over-mount-device.sh: skipped test: must be run as root'
over-mount-device.sh: skipped test: must be run as root
+ test 9 = 2
+ printf '%s\n' 'over-mount-device.sh: skipped test: must be run as root'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-over-mount-device.sh.1Css
+ rm -rf /sources/coreutils-8.30/gt-over-mount-device.sh.1Css
+ exit 77
SKIP tests/df/over-mount-device.sh (exit status: 77)

SKIP: tests/du/bind-mount-dir-cycle
===================================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-bind-mount-dir-cycle.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-bind-mount-dir-cycle.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-bind-mount-dir-cycle.sh.4hcC
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-bind-mount-dir-cycle.sh.4hcC
++++ ls -dgo /sources/coreutils-8.30/gt-bind-mount-dir-cycle.sh.4hcC
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-bind-mount-dir-cycle.sh.4hcC'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-bind-mount-dir-cycle.sh.4hcC
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-bind-mount-dir-cycle.sh.4hcC
++ cd /sources/coreutils-8.30/gt-bind-mount-dir-cycle.sh.4hcC
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ du
+ require_built_ du
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env du --version
du (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Torbjorn Granlund, David MacKenzie, Paul Eggert,
and Jim Meyering.
+ require_root_
+ uid_is_privileged_
++ id -u
+ my_uid=99
+ case $my_uid in
+ return 1
+ skip_ 'must be run as root'
+ warn_ 'bind-mount-dir-cycle.sh: skipped test: must be run as root'
+ case $IFS in
+ printf '%s\n' 'bind-mount-dir-cycle.sh: skipped test: must be run as root'
bind-mount-dir-cycle.sh: skipped test: must be run as root
+ test 9 = 2
+ sed 1q
+ printf '%s\n' 'bind-mount-dir-cycle.sh: skipped test: must be run as root'
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-bind-mount-dir-cycle.sh.4hcC
+ rm -rf /sources/coreutils-8.30/gt-bind-mount-dir-cycle.sh.4hcC
+ exit 77
SKIP tests/du/bind-mount-dir-cycle.sh (exit status: 77)

SKIP: tests/du/bind-mount-dir-cycle-v2
======================================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-bind-mount-dir-cycle-v2.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-bind-mount-dir-cycle-v2.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-bind-mount-dir-cycle-v2.sh.mUcG
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-bind-mount-dir-cycle-v2.sh.mUcG
++++ ls -dgo /sources/coreutils-8.30/gt-bind-mount-dir-cycle-v2.sh.mUcG
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-bind-mount-dir-cycle-v2.sh.mUcG'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-bind-mount-dir-cycle-v2.sh.mUcG
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-bind-mount-dir-cycle-v2.sh.mUcG
++ cd /sources/coreutils-8.30/gt-bind-mount-dir-cycle-v2.sh.mUcG
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ du
+ require_built_ du
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env du --version
du (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Torbjorn Granlund, David MacKenzie, Paul Eggert,
and Jim Meyering.
+ require_root_
+ uid_is_privileged_
++ id -u
+ my_uid=99
+ case $my_uid in
+ return 1
+ skip_ 'must be run as root'
+ warn_ 'bind-mount-dir-cycle-v2.sh: skipped test: must be run as root'
+ case $IFS in
+ printf '%s\n' 'bind-mount-dir-cycle-v2.sh: skipped test: must be run as root'
bind-mount-dir-cycle-v2.sh: skipped test: must be run as root
+ test 9 = 2
+ printf '%s\n' 'bind-mount-dir-cycle-v2.sh: skipped test: must be run as root'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-bind-mount-dir-cycle-v2.sh.mUcG
+ rm -rf /sources/coreutils-8.30/gt-bind-mount-dir-cycle-v2.sh.mUcG
+ exit 77
SKIP tests/du/bind-mount-dir-cycle-v2.sh (exit status: 77)

SKIP: tests/id/setgid
=====================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-setgid.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-setgid.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-setgid.sh.SjjL
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-setgid.sh.SjjL
++++ ls -dgo /sources/coreutils-8.30/gt-setgid.sh.SjjL
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-setgid.sh.SjjL'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-setgid.sh.SjjL
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-setgid.sh.SjjL
++ cd /sources/coreutils-8.30/gt-setgid.sh.SjjL
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ id
+ require_built_ id
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env id --version
id (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Arnold Robbins and David MacKenzie.
+ require_root_
+ uid_is_privileged_
++ id -u
+ my_uid=99
+ case $my_uid in
+ return 1
+ skip_ 'must be run as root'
+ warn_ 'setgid.sh: skipped test: must be run as root'
+ case $IFS in
+ printf '%s\n' 'setgid.sh: skipped test: must be run as root'
setgid.sh: skipped test: must be run as root
+ test 9 = 2
+ printf '%s\n' 'setgid.sh: skipped test: must be run as root'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-setgid.sh.SjjL
+ rm -rf /sources/coreutils-8.30/gt-setgid.sh.SjjL
+ exit 77
SKIP tests/id/setgid.sh (exit status: 77)

SKIP: tests/install/install-C-root
==================================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-install-C-root.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-install-C-root.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-install-C-root.sh.brxO
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-install-C-root.sh.brxO
++++ ls -dgo /sources/coreutils-8.30/gt-install-C-root.sh.brxO
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-install-C-root.sh.brxO'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-install-C-root.sh.brxO
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-install-C-root.sh.brxO
++ cd /sources/coreutils-8.30/gt-install-C-root.sh.brxO
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ ginstall
+ require_built_ ginstall
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env ginstall --version
install (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by David MacKenzie.
+ require_root_
+ uid_is_privileged_
++ id -u
+ my_uid=99
+ case $my_uid in
+ return 1
+ skip_ 'must be run as root'
+ warn_ 'install-C-root.sh: skipped test: must be run as root'
+ case $IFS in
+ printf '%s\n' 'install-C-root.sh: skipped test: must be run as root'
install-C-root.sh: skipped test: must be run as root
+ test 9 = 2
+ printf '%s\n' 'install-C-root.sh: skipped test: must be run as root'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-install-C-root.sh.brxO
+ rm -rf /sources/coreutils-8.30/gt-install-C-root.sh.brxO
+ exit 77
SKIP tests/install/install-C-root.sh (exit status: 77)

SKIP: tests/ls/capability
=========================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-capability.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-capability.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-capability.sh.rYoE
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-capability.sh.rYoE
++++ ls -dgo /sources/coreutils-8.30/gt-capability.sh.rYoE
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-capability.sh.rYoE'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-capability.sh.rYoE
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-capability.sh.rYoE
++ cd /sources/coreutils-8.30/gt-capability.sh.rYoE
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ ls printf
+ require_built_ ls printf
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env ls --version
ls (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Richard M. Stallman and David MacKenzie.
+ for i in $*
+ env printf --version
printf (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by David MacKenzie.
+ require_root_
+ uid_is_privileged_
++ id -u
+ my_uid=99
+ case $my_uid in
+ return 1
+ skip_ 'must be run as root'
+ warn_ 'capability.sh: skipped test: must be run as root'
+ case $IFS in
+ printf '%s\n' 'capability.sh: skipped test: must be run as root'
capability.sh: skipped test: must be run as root
+ test 9 = 2
+ sed 1q
+ printf '%s\n' 'capability.sh: skipped test: must be run as root'
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-capability.sh.rYoE
+ rm -rf /sources/coreutils-8.30/gt-capability.sh.rYoE
+ exit 77
SKIP tests/ls/capability.sh (exit status: 77)

SKIP: tests/ls/nameless-uid
===========================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-nameless-uid.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-nameless-uid.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-nameless-uid.sh.gbz8
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-nameless-uid.sh.gbz8
++++ ls -dgo /sources/coreutils-8.30/gt-nameless-uid.sh.gbz8
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-nameless-uid.sh.gbz8'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-nameless-uid.sh.gbz8
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-nameless-uid.sh.gbz8
++ cd /sources/coreutils-8.30/gt-nameless-uid.sh.gbz8
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ ls
+ require_built_ ls
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env ls --version
ls (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Richard M. Stallman and David MacKenzie.
+ require_root_
+ uid_is_privileged_
++ id -u
+ my_uid=99
+ case $my_uid in
+ return 1
+ skip_ 'must be run as root'
+ warn_ 'nameless-uid.sh: skipped test: must be run as root'
+ case $IFS in
+ printf '%s\n' 'nameless-uid.sh: skipped test: must be run as root'
nameless-uid.sh: skipped test: must be run as root
+ test 9 = 2
+ printf '%s\n' 'nameless-uid.sh: skipped test: must be run as root'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-nameless-uid.sh.gbz8
+ rm -rf /sources/coreutils-8.30/gt-nameless-uid.sh.gbz8
+ exit 77
SKIP tests/ls/nameless-uid.sh (exit status: 77)

SKIP: tests/misc/chcon
======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-chcon.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-chcon.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-chcon.sh.oonL
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-chcon.sh.oonL
++++ ls -dgo /sources/coreutils-8.30/gt-chcon.sh.oonL
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-chcon.sh.oonL'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-chcon.sh.oonL
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-chcon.sh.oonL
++ cd /sources/coreutils-8.30/gt-chcon.sh.oonL
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ chcon
+ require_built_ chcon
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env chcon --version
chcon (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Russell Coker and Jim Meyering.
+ require_root_
+ uid_is_privileged_
++ id -u
+ my_uid=99
+ case $my_uid in
+ return 1
+ skip_ 'must be run as root'
+ warn_ 'chcon.sh: skipped test: must be run as root'
+ case $IFS in
+ printf '%s\n' 'chcon.sh: skipped test: must be run as root'
chcon.sh: skipped test: must be run as root
+ test 9 = 2
+ printf '%s\n' 'chcon.sh: skipped test: must be run as root'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-chcon.sh.oonL
+ rm -rf /sources/coreutils-8.30/gt-chcon.sh.oonL
+ exit 77
SKIP tests/misc/chcon.sh (exit status: 77)

SKIP: tests/misc/chroot-credentials
===================================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-chroot-credentials.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-chroot-credentials.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-chroot-credentials.sh.rcwi
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-chroot-credentials.sh.rcwi
++++ ls -dgo /sources/coreutils-8.30/gt-chroot-credentials.sh.rcwi
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-chroot-credentials.sh.rcwi'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-chroot-credentials.sh.rcwi
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-chroot-credentials.sh.rcwi
++ cd /sources/coreutils-8.30/gt-chroot-credentials.sh.rcwi
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ chroot
+ require_built_ chroot
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env chroot --version
chroot (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Roland McGrath.
+ require_root_
+ uid_is_privileged_
++ id -u
+ my_uid=99
+ case $my_uid in
+ return 1
+ skip_ 'must be run as root'
+ warn_ 'chroot-credentials.sh: skipped test: must be run as root'
+ case $IFS in
+ printf '%s\n' 'chroot-credentials.sh: skipped test: must be run as root'
chroot-credentials.sh: skipped test: must be run as root
+ test 9 = 2
+ printf '%s\n' 'chroot-credentials.sh: skipped test: must be run as root'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-chroot-credentials.sh.rcwi
+ rm -rf /sources/coreutils-8.30/gt-chroot-credentials.sh.rcwi
+ exit 77
SKIP tests/misc/chroot-credentials.sh (exit status: 77)

SKIP: tests/misc/selinux
========================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-selinux.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-selinux.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-selinux.sh.OkyA
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-selinux.sh.OkyA
++++ ls -dgo /sources/coreutils-8.30/gt-selinux.sh.OkyA
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-selinux.sh.OkyA'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-selinux.sh.OkyA
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-selinux.sh.OkyA
++ cd /sources/coreutils-8.30/gt-selinux.sh.OkyA
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ chcon cp ls mv stat
+ require_built_ chcon cp ls mv stat
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ for i in "$@"
+ case " $built_programs " in
+ for i in "$@"
+ case " $built_programs " in
+ for i in "$@"
+ case " $built_programs " in
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env chcon --version
chcon (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Russell Coker and Jim Meyering.
+ for i in $*
+ env cp --version
cp (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Torbjorn Granlund, David MacKenzie, and Jim Meyering.
+ for i in $*
+ env ls --version
ls (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Richard M. Stallman and David MacKenzie.
+ for i in $*
+ env mv --version
mv (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Mike Parker, David MacKenzie, and Jim Meyering.
+ for i in $*
+ env stat --version
stat (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Michael Meskes.
+ require_root_
+ uid_is_privileged_
++ id -u
+ my_uid=99
+ case $my_uid in
+ return 1
+ skip_ 'must be run as root'
+ warn_ 'selinux.sh: skipped test: must be run as root'
+ case $IFS in
+ printf '%s\n' 'selinux.sh: skipped test: must be run as root'
selinux.sh: skipped test: must be run as root
+ test 9 = 2
+ printf '%s\n' 'selinux.sh: skipped test: must be run as root'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-selinux.sh.OkyA
+ rm -rf /sources/coreutils-8.30/gt-selinux.sh.OkyA
+ exit 77
SKIP tests/misc/selinux.sh (exit status: 77)

SKIP: tests/misc/truncate-owned-by-other
========================================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-truncate-owned-by-other.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-truncate-owned-by-other.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-truncate-owned-by-other.sh.edbT
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-truncate-owned-by-other.sh.edbT
++++ ls -dgo /sources/coreutils-8.30/gt-truncate-owned-by-other.sh.edbT
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-truncate-owned-by-other.sh.edbT'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-truncate-owned-by-other.sh.edbT
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-truncate-owned-by-other.sh.edbT
++ cd /sources/coreutils-8.30/gt-truncate-owned-by-other.sh.edbT
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ truncate
+ require_built_ truncate
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env truncate --version
truncate (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Padraig Brady.
+ require_root_
+ uid_is_privileged_
++ id -u
+ my_uid=99
+ case $my_uid in
+ return 1
+ skip_ 'must be run as root'
+ warn_ 'truncate-owned-by-other.sh: skipped test: must be run as root'
+ case $IFS in
+ printf '%s\n' 'truncate-owned-by-other.sh: skipped test: must be run as root'
truncate-owned-by-other.sh: skipped test: must be run as root
+ test 9 = 2
+ printf '%s\n' 'truncate-owned-by-other.sh: skipped test: must be run as root'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-truncate-owned-by-other.sh.edbT
+ rm -rf /sources/coreutils-8.30/gt-truncate-owned-by-other.sh.edbT
+ exit 77
SKIP tests/misc/truncate-owned-by-other.sh (exit status: 77)

SKIP: tests/mkdir/writable-under-readonly
=========================================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-writable-under-readonly.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-writable-under-readonly.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-writable-under-readonly.sh.K72H
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-writable-under-readonly.sh.K72H
++++ ls -dgo /sources/coreutils-8.30/gt-writable-under-readonly.sh.K72H
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-writable-under-readonly.sh.K72H'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-writable-under-readonly.sh.K72H
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-writable-under-readonly.sh.K72H
++ cd /sources/coreutils-8.30/gt-writable-under-readonly.sh.K72H
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ mkdir
+ require_built_ mkdir
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env mkdir --version
mkdir (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by David MacKenzie.
+ require_root_
+ uid_is_privileged_
++ id -u
+ my_uid=99
+ case $my_uid in
+ return 1
+ skip_ 'must be run as root'
+ warn_ 'writable-under-readonly.sh: skipped test: must be run as root'
+ case $IFS in
+ printf '%s\n' 'writable-under-readonly.sh: skipped test: must be run as root'
writable-under-readonly.sh: skipped test: must be run as root
+ test 9 = 2
+ printf '%s\n' 'writable-under-readonly.sh: skipped test: must be run as root'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-writable-under-readonly.sh.K72H
+ rm -rf /sources/coreutils-8.30/gt-writable-under-readonly.sh.K72H
+ exit 77
SKIP tests/mkdir/writable-under-readonly.sh (exit status: 77)

SKIP: tests/mkdir/smack-root
============================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-smack-root.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-smack-root.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-smack-root.sh.salm
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-smack-root.sh.salm
++++ ls -dgo /sources/coreutils-8.30/gt-smack-root.sh.salm
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-smack-root.sh.salm'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-smack-root.sh.salm
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-smack-root.sh.salm
++ cd /sources/coreutils-8.30/gt-smack-root.sh.salm
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ mkdir mkfifo mknod
+ require_built_ mkdir mkfifo mknod
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ for i in "$@"
+ case " $built_programs " in
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env mkdir --version
mkdir (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by David MacKenzie.
+ for i in $*
+ env mkfifo --version
mkfifo (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by David MacKenzie.
+ for i in $*
+ env mknod --version
mknod (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by David MacKenzie.
+ require_smack_
+ grep 'smackfs$' /proc/filesystems
+ skip_ 'this system lacks SMACK support'
+ warn_ 'smack-root.sh: skipped test: this system lacks SMACK support'
+ case $IFS in
+ printf '%s\n' 'smack-root.sh: skipped test: this system lacks SMACK support'
smack-root.sh: skipped test: this system lacks SMACK support
+ test 9 = 2
+ printf '%s\n' 'smack-root.sh: skipped test: this system lacks SMACK support'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-smack-root.sh.salm
+ rm -rf /sources/coreutils-8.30/gt-smack-root.sh.salm
+ exit 77
SKIP tests/mkdir/smack-root.sh (exit status: 77)

SKIP: tests/mv/hardlink-case
============================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-hardlink-case.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-hardlink-case.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-hardlink-case.sh.7Qv8
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-hardlink-case.sh.7Qv8
++++ ls -dgo /sources/coreutils-8.30/gt-hardlink-case.sh.7Qv8
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-hardlink-case.sh.7Qv8'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-hardlink-case.sh.7Qv8
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-hardlink-case.sh.7Qv8
++ cd /sources/coreutils-8.30/gt-hardlink-case.sh.7Qv8
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ mv
+ require_built_ mv
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env mv --version
mv (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Mike Parker, David MacKenzie, and Jim Meyering.
+ require_root_
+ uid_is_privileged_
++ id -u
+ my_uid=99
+ case $my_uid in
+ return 1
+ skip_ 'must be run as root'
+ warn_ 'hardlink-case.sh: skipped test: must be run as root'
+ case $IFS in
+ printf '%s\n' 'hardlink-case.sh: skipped test: must be run as root'
hardlink-case.sh: skipped test: must be run as root
+ test 9 = 2
+ printf '%s\n' 'hardlink-case.sh: skipped test: must be run as root'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-hardlink-case.sh.7Qv8
+ rm -rf /sources/coreutils-8.30/gt-hardlink-case.sh.7Qv8
+ exit 77
SKIP tests/mv/hardlink-case.sh (exit status: 77)

SKIP: tests/mv/sticky-to-xpart
==============================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-sticky-to-xpart.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-sticky-to-xpart.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-sticky-to-xpart.sh.X2FV
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-sticky-to-xpart.sh.X2FV
++++ ls -dgo /sources/coreutils-8.30/gt-sticky-to-xpart.sh.X2FV
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-sticky-to-xpart.sh.X2FV'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-sticky-to-xpart.sh.X2FV
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-sticky-to-xpart.sh.X2FV
++ cd /sources/coreutils-8.30/gt-sticky-to-xpart.sh.X2FV
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ mv
+ require_built_ mv
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env mv --version
mv (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Mike Parker, David MacKenzie, and Jim Meyering.
+ require_root_
+ uid_is_privileged_
++ id -u
+ my_uid=99
+ case $my_uid in
+ return 1
+ skip_ 'must be run as root'
+ warn_ 'sticky-to-xpart.sh: skipped test: must be run as root'
+ case $IFS in
+ printf '%s\n' 'sticky-to-xpart.sh: skipped test: must be run as root'
sticky-to-xpart.sh: skipped test: must be run as root
+ test 9 = 2
+ printf '%s\n' 'sticky-to-xpart.sh: skipped test: must be run as root'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-sticky-to-xpart.sh.X2FV
+ rm -rf /sources/coreutils-8.30/gt-sticky-to-xpart.sh.X2FV
+ exit 77
SKIP tests/mv/sticky-to-xpart.sh (exit status: 77)

SKIP: tests/rm/fail-2eperm
==========================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-fail-2eperm.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-fail-2eperm.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-fail-2eperm.sh.IFLH
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-fail-2eperm.sh.IFLH
++++ ls -dgo /sources/coreutils-8.30/gt-fail-2eperm.sh.IFLH
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-fail-2eperm.sh.IFLH'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-fail-2eperm.sh.IFLH
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-fail-2eperm.sh.IFLH
++ cd /sources/coreutils-8.30/gt-fail-2eperm.sh.IFLH
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ rm
+ require_built_ rm
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env rm --version
rm (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Paul Rubin, David MacKenzie, Richard M. Stallman,
and Jim Meyering.
+ require_root_
+ uid_is_privileged_
++ id -u
+ my_uid=99
+ case $my_uid in
+ return 1
+ skip_ 'must be run as root'
+ warn_ 'fail-2eperm.sh: skipped test: must be run as root'
+ case $IFS in
+ printf '%s\n' 'fail-2eperm.sh: skipped test: must be run as root'
fail-2eperm.sh: skipped test: must be run as root
+ test 9 = 2
+ printf '%s\n' 'fail-2eperm.sh: skipped test: must be run as root'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-fail-2eperm.sh.IFLH
+ rm -rf /sources/coreutils-8.30/gt-fail-2eperm.sh.IFLH
+ exit 77
SKIP tests/rm/fail-2eperm.sh (exit status: 77)

SKIP: tests/rm/no-give-up
=========================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-no-give-up.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-no-give-up.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-no-give-up.sh.NgtX
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-no-give-up.sh.NgtX
++++ ls -dgo /sources/coreutils-8.30/gt-no-give-up.sh.NgtX
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-no-give-up.sh.NgtX'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-no-give-up.sh.NgtX
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-no-give-up.sh.NgtX
++ cd /sources/coreutils-8.30/gt-no-give-up.sh.NgtX
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ rm
+ require_built_ rm
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env rm --version
rm (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Paul Rubin, David MacKenzie, Richard M. Stallman,
and Jim Meyering.
+ require_root_
+ uid_is_privileged_
++ id -u
+ my_uid=99
+ case $my_uid in
+ return 1
+ skip_ 'must be run as root'
+ warn_ 'no-give-up.sh: skipped test: must be run as root'
+ case $IFS in
+ printf '%s\n' 'no-give-up.sh: skipped test: must be run as root'
no-give-up.sh: skipped test: must be run as root
+ test 9 = 2
+ sed 1q
+ printf '%s\n' 'no-give-up.sh: skipped test: must be run as root'
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-no-give-up.sh.NgtX
+ rm -rf /sources/coreutils-8.30/gt-no-give-up.sh.NgtX
+ exit 77
SKIP tests/rm/no-give-up.sh (exit status: 77)

SKIP: tests/rm/one-file-system
==============================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-one-file-system.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-one-file-system.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-one-file-system.sh.T1mn
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-one-file-system.sh.T1mn
++++ ls -dgo /sources/coreutils-8.30/gt-one-file-system.sh.T1mn
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-one-file-system.sh.T1mn'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-one-file-system.sh.T1mn
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-one-file-system.sh.T1mn
++ cd /sources/coreutils-8.30/gt-one-file-system.sh.T1mn
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ rm
+ require_built_ rm
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env rm --version
rm (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Paul Rubin, David MacKenzie, Richard M. Stallman,
and Jim Meyering.
+ require_root_
+ uid_is_privileged_
++ id -u
+ my_uid=99
+ case $my_uid in
+ return 1
+ skip_ 'must be run as root'
+ warn_ 'one-file-system.sh: skipped test: must be run as root'
+ case $IFS in
+ printf '%s\n' 'one-file-system.sh: skipped test: must be run as root'
one-file-system.sh: skipped test: must be run as root
+ test 9 = 2
+ printf '%s\n' 'one-file-system.sh: skipped test: must be run as root'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-one-file-system.sh.T1mn
+ rm -rf /sources/coreutils-8.30/gt-one-file-system.sh.T1mn
+ exit 77
SKIP tests/rm/one-file-system.sh (exit status: 77)

SKIP: tests/rm/read-only
========================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-read-only.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-read-only.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-read-only.sh.vtFD
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-read-only.sh.vtFD
++++ ls -dgo /sources/coreutils-8.30/gt-read-only.sh.vtFD
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-read-only.sh.vtFD'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-read-only.sh.vtFD
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-read-only.sh.vtFD
++ cd /sources/coreutils-8.30/gt-read-only.sh.vtFD
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ rm
+ require_built_ rm
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env rm --version
rm (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Paul Rubin, David MacKenzie, Richard M. Stallman,
and Jim Meyering.
+ require_root_
+ uid_is_privileged_
++ id -u
+ my_uid=99
+ case $my_uid in
+ return 1
+ skip_ 'must be run as root'
+ warn_ 'read-only.sh: skipped test: must be run as root'
+ case $IFS in
+ printf '%s\n' 'read-only.sh: skipped test: must be run as root'
read-only.sh: skipped test: must be run as root
+ test 9 = 2
+ sed 1q
+ printf '%s\n' 'read-only.sh: skipped test: must be run as root'
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-read-only.sh.vtFD
+ rm -rf /sources/coreutils-8.30/gt-read-only.sh.vtFD
+ exit 77
SKIP tests/rm/read-only.sh (exit status: 77)

SKIP: tests/tail-2/append-only
==============================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-append-only.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-append-only.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-append-only.sh.MG0b
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-append-only.sh.MG0b
++++ ls -dgo /sources/coreutils-8.30/gt-append-only.sh.MG0b
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-append-only.sh.MG0b'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-append-only.sh.MG0b
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-append-only.sh.MG0b
++ cd /sources/coreutils-8.30/gt-append-only.sh.MG0b
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ tail
+ require_built_ tail
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env tail --version
tail (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Paul Rubin, David MacKenzie, Ian Lance Taylor,
and Jim Meyering.
+ require_root_
+ uid_is_privileged_
++ id -u
+ my_uid=99
+ case $my_uid in
+ return 1
+ skip_ 'must be run as root'
+ warn_ 'append-only.sh: skipped test: must be run as root'
+ case $IFS in
+ printf '%s\n' 'append-only.sh: skipped test: must be run as root'
append-only.sh: skipped test: must be run as root
+ test 9 = 2
+ printf '%s\n' 'append-only.sh: skipped test: must be run as root'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-append-only.sh.MG0b
+ rm -rf /sources/coreutils-8.30/gt-append-only.sh.MG0b
+ exit 77
SKIP tests/tail-2/append-only.sh (exit status: 77)

SKIP: tests/tail-2/end-of-device
================================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-end-of-device.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-end-of-device.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-end-of-device.sh.DG9W
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-end-of-device.sh.DG9W
++++ ls -dgo /sources/coreutils-8.30/gt-end-of-device.sh.DG9W
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-end-of-device.sh.DG9W'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-end-of-device.sh.DG9W
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-end-of-device.sh.DG9W
++ cd /sources/coreutils-8.30/gt-end-of-device.sh.DG9W
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ tail
+ require_built_ tail
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env tail --version
tail (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Paul Rubin, David MacKenzie, Ian Lance Taylor,
and Jim Meyering.
+ require_root_
+ uid_is_privileged_
++ id -u
+ my_uid=99
+ case $my_uid in
+ return 1
+ skip_ 'must be run as root'
+ warn_ 'end-of-device.sh: skipped test: must be run as root'
+ case $IFS in
+ printf '%s\n' 'end-of-device.sh: skipped test: must be run as root'
end-of-device.sh: skipped test: must be run as root
+ test 9 = 2
+ printf '%s\n' 'end-of-device.sh: skipped test: must be run as root'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-end-of-device.sh.DG9W
+ rm -rf /sources/coreutils-8.30/gt-end-of-device.sh.DG9W
+ exit 77
SKIP tests/tail-2/end-of-device.sh (exit status: 77)

SKIP: tests/touch/now-owned-by-other
====================================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-now-owned-by-other.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-now-owned-by-other.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-now-owned-by-other.sh.AUeG
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-now-owned-by-other.sh.AUeG
++++ ls -dgo /sources/coreutils-8.30/gt-now-owned-by-other.sh.AUeG
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-now-owned-by-other.sh.AUeG'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-now-owned-by-other.sh.AUeG
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-now-owned-by-other.sh.AUeG
++ cd /sources/coreutils-8.30/gt-now-owned-by-other.sh.AUeG
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ touch
+ require_built_ touch
+ skip_=no
+ for i in "$@"
+ case " $built_programs " in
+ test no = yes
+ test yes = yes
+ local i
+ for i in $*
+ env touch --version
touch (GNU coreutils) 8.30
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Paul Rubin, Arnold Robbins, Jim Kingdon,
David MacKenzie, and Randy Smith.
+ require_root_
+ uid_is_privileged_
++ id -u
+ my_uid=99
+ case $my_uid in
+ return 1
+ skip_ 'must be run as root'
+ warn_ 'now-owned-by-other.sh: skipped test: must be run as root'
+ case $IFS in
+ printf '%s\n' 'now-owned-by-other.sh: skipped test: must be run as root'
now-owned-by-other.sh: skipped test: must be run as root
+ test 9 = 2
+ printf '%s\n' 'now-owned-by-other.sh: skipped test: must be run as root'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-now-owned-by-other.sh.AUeG
+ rm -rf /sources/coreutils-8.30/gt-now-owned-by-other.sh.AUeG
+ exit 77
SKIP tests/touch/now-owned-by-other.sh (exit status: 77)

SKIP: tests/factor/t00
======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-t00.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-t00.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-t00.sh.Wg7N
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-t00.sh.Wg7N
++++ ls -dgo /sources/coreutils-8.30/gt-t00.sh.Wg7N
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-t00.sh.Wg7N'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-t00.sh.Wg7N
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-t00.sh.Wg7N
++ cd /sources/coreutils-8.30/gt-t00.sh.Wg7N
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ 't00.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' 't00.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
t00.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ sed 1q
+ printf '%s\n' 't00.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-t00.sh.Wg7N
+ rm -rf /sources/coreutils-8.30/gt-t00.sh.Wg7N
+ exit 77
SKIP tests/factor/t00.sh (exit status: 77)

SKIP: tests/factor/t01
======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-t01.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-t01.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-t01.sh.pGbk
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-t01.sh.pGbk
++++ ls -dgo /sources/coreutils-8.30/gt-t01.sh.pGbk
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-t01.sh.pGbk'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-t01.sh.pGbk
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-t01.sh.pGbk
++ cd /sources/coreutils-8.30/gt-t01.sh.pGbk
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ 't01.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' 't01.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
t01.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ printf '%s\n' 't01.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-t01.sh.pGbk
+ rm -rf /sources/coreutils-8.30/gt-t01.sh.pGbk
+ exit 77
SKIP tests/factor/t01.sh (exit status: 77)

SKIP: tests/factor/t02
======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-t02.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-t02.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-t02.sh.9nvr
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-t02.sh.9nvr
++++ ls -dgo /sources/coreutils-8.30/gt-t02.sh.9nvr
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-t02.sh.9nvr'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-t02.sh.9nvr
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-t02.sh.9nvr
++ cd /sources/coreutils-8.30/gt-t02.sh.9nvr
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ 't02.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' 't02.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
t02.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ printf '%s\n' 't02.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-t02.sh.9nvr
+ rm -rf /sources/coreutils-8.30/gt-t02.sh.9nvr
+ exit 77
SKIP tests/factor/t02.sh (exit status: 77)

SKIP: tests/factor/t03
======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-t03.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-t03.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-t03.sh.0aaM
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-t03.sh.0aaM
++++ ls -dgo /sources/coreutils-8.30/gt-t03.sh.0aaM
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-t03.sh.0aaM'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-t03.sh.0aaM
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-t03.sh.0aaM
++ cd /sources/coreutils-8.30/gt-t03.sh.0aaM
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ 't03.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' 't03.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
t03.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ printf '%s\n' 't03.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-t03.sh.0aaM
+ rm -rf /sources/coreutils-8.30/gt-t03.sh.0aaM
+ exit 77
SKIP tests/factor/t03.sh (exit status: 77)

SKIP: tests/factor/t04
======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-t04.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-t04.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-t04.sh.ouBH
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-t04.sh.ouBH
++++ ls -dgo /sources/coreutils-8.30/gt-t04.sh.ouBH
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-t04.sh.ouBH'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-t04.sh.ouBH
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-t04.sh.ouBH
++ cd /sources/coreutils-8.30/gt-t04.sh.ouBH
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ 't04.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' 't04.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
t04.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ printf '%s\n' 't04.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-t04.sh.ouBH
+ rm -rf /sources/coreutils-8.30/gt-t04.sh.ouBH
+ exit 77
SKIP tests/factor/t04.sh (exit status: 77)

SKIP: tests/factor/t05
======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-t05.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-t05.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-t05.sh.xPqR
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-t05.sh.xPqR
++++ ls -dgo /sources/coreutils-8.30/gt-t05.sh.xPqR
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-t05.sh.xPqR'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-t05.sh.xPqR
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-t05.sh.xPqR
++ cd /sources/coreutils-8.30/gt-t05.sh.xPqR
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ 't05.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' 't05.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
t05.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ sed 1q
+ printf '%s\n' 't05.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-t05.sh.xPqR
+ rm -rf /sources/coreutils-8.30/gt-t05.sh.xPqR
+ exit 77
SKIP tests/factor/t05.sh (exit status: 77)

SKIP: tests/factor/t06
======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-t06.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-t06.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-t06.sh.yFXi
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-t06.sh.yFXi
++++ ls -dgo /sources/coreutils-8.30/gt-t06.sh.yFXi
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-t06.sh.yFXi'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-t06.sh.yFXi
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-t06.sh.yFXi
++ cd /sources/coreutils-8.30/gt-t06.sh.yFXi
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ 't06.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' 't06.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
t06.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ printf '%s\n' 't06.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-t06.sh.yFXi
+ rm -rf /sources/coreutils-8.30/gt-t06.sh.yFXi
+ exit 77
SKIP tests/factor/t06.sh (exit status: 77)

SKIP: tests/factor/t07
======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-t07.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-t07.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-t07.sh.1daX
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-t07.sh.1daX
++++ ls -dgo /sources/coreutils-8.30/gt-t07.sh.1daX
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-t07.sh.1daX'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-t07.sh.1daX
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-t07.sh.1daX
++ cd /sources/coreutils-8.30/gt-t07.sh.1daX
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ 't07.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' 't07.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
t07.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ printf '%s\n' 't07.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-t07.sh.1daX
+ rm -rf /sources/coreutils-8.30/gt-t07.sh.1daX
+ exit 77
SKIP tests/factor/t07.sh (exit status: 77)

SKIP: tests/factor/t08
======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-t08.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-t08.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-t08.sh.tC7d
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-t08.sh.tC7d
++++ ls -dgo /sources/coreutils-8.30/gt-t08.sh.tC7d
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-t08.sh.tC7d'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-t08.sh.tC7d
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-t08.sh.tC7d
++ cd /sources/coreutils-8.30/gt-t08.sh.tC7d
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ 't08.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' 't08.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
t08.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ printf '%s\n' 't08.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-t08.sh.tC7d
+ rm -rf /sources/coreutils-8.30/gt-t08.sh.tC7d
+ exit 77
SKIP tests/factor/t08.sh (exit status: 77)

SKIP: tests/factor/t09
======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-t09.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-t09.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-t09.sh.7ir9
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-t09.sh.7ir9
++++ ls -dgo /sources/coreutils-8.30/gt-t09.sh.7ir9
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-t09.sh.7ir9'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-t09.sh.7ir9
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-t09.sh.7ir9
++ cd /sources/coreutils-8.30/gt-t09.sh.7ir9
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ 't09.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' 't09.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
t09.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ printf '%s\n' 't09.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-t09.sh.7ir9
+ rm -rf /sources/coreutils-8.30/gt-t09.sh.7ir9
+ exit 77
SKIP tests/factor/t09.sh (exit status: 77)

SKIP: tests/factor/t10
======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-t10.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-t10.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-t10.sh.8ure
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-t10.sh.8ure
++++ ls -dgo /sources/coreutils-8.30/gt-t10.sh.8ure
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-t10.sh.8ure'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-t10.sh.8ure
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-t10.sh.8ure
++ cd /sources/coreutils-8.30/gt-t10.sh.8ure
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ 't10.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' 't10.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
t10.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ printf '%s\n' 't10.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-t10.sh.8ure
+ rm -rf /sources/coreutils-8.30/gt-t10.sh.8ure
+ exit 77
SKIP tests/factor/t10.sh (exit status: 77)

SKIP: tests/factor/t11
======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-t11.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-t11.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-t11.sh.hxdF
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-t11.sh.hxdF
++++ ls -dgo /sources/coreutils-8.30/gt-t11.sh.hxdF
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-t11.sh.hxdF'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-t11.sh.hxdF
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-t11.sh.hxdF
++ cd /sources/coreutils-8.30/gt-t11.sh.hxdF
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ 't11.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' 't11.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
t11.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ printf '%s\n' 't11.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-t11.sh.hxdF
+ rm -rf /sources/coreutils-8.30/gt-t11.sh.hxdF
+ exit 77
SKIP tests/factor/t11.sh (exit status: 77)

SKIP: tests/factor/t12
======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-t12.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-t12.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-t12.sh.O3Nc
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-t12.sh.O3Nc
++++ ls -dgo /sources/coreutils-8.30/gt-t12.sh.O3Nc
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-t12.sh.O3Nc'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-t12.sh.O3Nc
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-t12.sh.O3Nc
++ cd /sources/coreutils-8.30/gt-t12.sh.O3Nc
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ 't12.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' 't12.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
t12.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ printf '%s\n' 't12.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-t12.sh.O3Nc
+ rm -rf /sources/coreutils-8.30/gt-t12.sh.O3Nc
+ exit 77
SKIP tests/factor/t12.sh (exit status: 77)

SKIP: tests/factor/t13
======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-t13.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-t13.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-t13.sh.Qkdv
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-t13.sh.Qkdv
++++ ls -dgo /sources/coreutils-8.30/gt-t13.sh.Qkdv
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-t13.sh.Qkdv'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-t13.sh.Qkdv
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-t13.sh.Qkdv
++ cd /sources/coreutils-8.30/gt-t13.sh.Qkdv
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ 't13.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' 't13.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
t13.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ printf '%s\n' 't13.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
+ sed 1q
'
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-t13.sh.Qkdv
+ rm -rf /sources/coreutils-8.30/gt-t13.sh.Qkdv
+ exit 77
SKIP tests/factor/t13.sh (exit status: 77)

SKIP: tests/factor/t14
======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-t14.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-t14.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-t14.sh.02SP
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-t14.sh.02SP
++++ ls -dgo /sources/coreutils-8.30/gt-t14.sh.02SP
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-t14.sh.02SP'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-t14.sh.02SP
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-t14.sh.02SP
++ cd /sources/coreutils-8.30/gt-t14.sh.02SP
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ 't14.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' 't14.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
t14.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ printf '%s\n' 't14.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-t14.sh.02SP
+ rm -rf /sources/coreutils-8.30/gt-t14.sh.02SP
+ exit 77
SKIP tests/factor/t14.sh (exit status: 77)

SKIP: tests/factor/t15
======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-t15.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-t15.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-t15.sh.KwXw
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-t15.sh.KwXw
++++ ls -dgo /sources/coreutils-8.30/gt-t15.sh.KwXw
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-t15.sh.KwXw'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-t15.sh.KwXw
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-t15.sh.KwXw
++ cd /sources/coreutils-8.30/gt-t15.sh.KwXw
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ 't15.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' 't15.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
t15.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ sed 1q
+ printf '%s\n' 't15.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-t15.sh.KwXw
+ rm -rf /sources/coreutils-8.30/gt-t15.sh.KwXw
+ exit 77
SKIP tests/factor/t15.sh (exit status: 77)

SKIP: tests/factor/t16
======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-t16.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-t16.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-t16.sh.YNq9
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-t16.sh.YNq9
++++ ls -dgo /sources/coreutils-8.30/gt-t16.sh.YNq9
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-t16.sh.YNq9'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-t16.sh.YNq9
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-t16.sh.YNq9
++ cd /sources/coreutils-8.30/gt-t16.sh.YNq9
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ 't16.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' 't16.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
t16.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ sed 1q
+ printf '%s\n' 't16.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-t16.sh.YNq9
+ rm -rf /sources/coreutils-8.30/gt-t16.sh.YNq9
+ exit 77
SKIP tests/factor/t16.sh (exit status: 77)

SKIP: tests/factor/t17
======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-t17.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-t17.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-t17.sh.mQRH
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-t17.sh.mQRH
++++ ls -dgo /sources/coreutils-8.30/gt-t17.sh.mQRH
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-t17.sh.mQRH'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-t17.sh.mQRH
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-t17.sh.mQRH
++ cd /sources/coreutils-8.30/gt-t17.sh.mQRH
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ 't17.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' 't17.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
t17.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ printf '%s\n' 't17.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-t17.sh.mQRH
+ rm -rf /sources/coreutils-8.30/gt-t17.sh.mQRH
+ exit 77
SKIP tests/factor/t17.sh (exit status: 77)

SKIP: tests/factor/t18
======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-t18.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-t18.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-t18.sh.K0N9
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-t18.sh.K0N9
++++ ls -dgo /sources/coreutils-8.30/gt-t18.sh.K0N9
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-t18.sh.K0N9'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-t18.sh.K0N9
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-t18.sh.K0N9
++ cd /sources/coreutils-8.30/gt-t18.sh.K0N9
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ 't18.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' 't18.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
t18.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ printf '%s\n' 't18.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-t18.sh.K0N9
+ rm -rf /sources/coreutils-8.30/gt-t18.sh.K0N9
+ exit 77
SKIP tests/factor/t18.sh (exit status: 77)

SKIP: tests/factor/t19
======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-t19.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-t19.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-t19.sh.ZGKv
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-t19.sh.ZGKv
++++ ls -dgo /sources/coreutils-8.30/gt-t19.sh.ZGKv
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-t19.sh.ZGKv'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-t19.sh.ZGKv
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-t19.sh.ZGKv
++ cd /sources/coreutils-8.30/gt-t19.sh.ZGKv
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ 't19.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' 't19.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
t19.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ printf '%s\n' 't19.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-t19.sh.ZGKv
+ rm -rf /sources/coreutils-8.30/gt-t19.sh.ZGKv
+ exit 77
SKIP tests/factor/t19.sh (exit status: 77)

SKIP: tests/factor/t20
======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-t20.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-t20.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-t20.sh.M25f
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-t20.sh.M25f
++++ ls -dgo /sources/coreutils-8.30/gt-t20.sh.M25f
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-t20.sh.M25f'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-t20.sh.M25f
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-t20.sh.M25f
++ cd /sources/coreutils-8.30/gt-t20.sh.M25f
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ 't20.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' 't20.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
t20.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ sed 1q
+ printf '%s\n' 't20.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-t20.sh.M25f
+ rm -rf /sources/coreutils-8.30/gt-t20.sh.M25f
+ exit 77
SKIP tests/factor/t20.sh (exit status: 77)

SKIP: tests/factor/t21
======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-t21.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-t21.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-t21.sh.mAUi
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-t21.sh.mAUi
++++ ls -dgo /sources/coreutils-8.30/gt-t21.sh.mAUi
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-t21.sh.mAUi'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-t21.sh.mAUi
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-t21.sh.mAUi
++ cd /sources/coreutils-8.30/gt-t21.sh.mAUi
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ 't21.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' 't21.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
t21.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ sed 1q
+ printf '%s\n' 't21.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-t21.sh.mAUi
+ rm -rf /sources/coreutils-8.30/gt-t21.sh.mAUi
+ exit 77
SKIP tests/factor/t21.sh (exit status: 77)

SKIP: tests/factor/t22
======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-t22.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-t22.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-t22.sh.1t86
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-t22.sh.1t86
++++ ls -dgo /sources/coreutils-8.30/gt-t22.sh.1t86
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-t22.sh.1t86'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-t22.sh.1t86
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-t22.sh.1t86
++ cd /sources/coreutils-8.30/gt-t22.sh.1t86
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ 't22.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' 't22.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
t22.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ printf '%s\n' 't22.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-t22.sh.1t86
+ rm -rf /sources/coreutils-8.30/gt-t22.sh.1t86
+ exit 77
SKIP tests/factor/t22.sh (exit status: 77)

SKIP: tests/factor/t23
======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-t23.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-t23.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-t23.sh.rYuh
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-t23.sh.rYuh
++++ ls -dgo /sources/coreutils-8.30/gt-t23.sh.rYuh
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-t23.sh.rYuh'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-t23.sh.rYuh
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-t23.sh.rYuh
++ cd /sources/coreutils-8.30/gt-t23.sh.rYuh
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ 't23.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' 't23.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
t23.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ sed 1q
+ printf '%s\n' 't23.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-t23.sh.rYuh
+ rm -rf /sources/coreutils-8.30/gt-t23.sh.rYuh
+ exit 77
SKIP tests/factor/t23.sh (exit status: 77)

SKIP: tests/factor/t24
======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-t24.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-t24.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-t24.sh.tYg6
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-t24.sh.tYg6
++++ ls -dgo /sources/coreutils-8.30/gt-t24.sh.tYg6
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-t24.sh.tYg6'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-t24.sh.tYg6
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-t24.sh.tYg6
++ cd /sources/coreutils-8.30/gt-t24.sh.tYg6
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ 't24.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' 't24.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
t24.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ printf '%s\n' 't24.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-t24.sh.tYg6
+ rm -rf /sources/coreutils-8.30/gt-t24.sh.tYg6
+ exit 77
SKIP tests/factor/t24.sh (exit status: 77)

SKIP: tests/factor/t25
======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-t25.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-t25.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-t25.sh.4w9w
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-t25.sh.4w9w
++++ ls -dgo /sources/coreutils-8.30/gt-t25.sh.4w9w
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-t25.sh.4w9w'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-t25.sh.4w9w
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-t25.sh.4w9w
++ cd /sources/coreutils-8.30/gt-t25.sh.4w9w
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ 't25.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' 't25.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
t25.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ printf '%s\n' 't25.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-t25.sh.4w9w
+ rm -rf /sources/coreutils-8.30/gt-t25.sh.4w9w
+ exit 77
SKIP tests/factor/t25.sh (exit status: 77)

SKIP: tests/factor/t26
======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-t26.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-t26.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-t26.sh.jlJv
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-t26.sh.jlJv
++++ ls -dgo /sources/coreutils-8.30/gt-t26.sh.jlJv
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-t26.sh.jlJv'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-t26.sh.jlJv
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-t26.sh.jlJv
++ cd /sources/coreutils-8.30/gt-t26.sh.jlJv
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ 't26.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' 't26.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
t26.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ printf '%s\n' 't26.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-t26.sh.jlJv
+ rm -rf /sources/coreutils-8.30/gt-t26.sh.jlJv
+ exit 77
SKIP tests/factor/t26.sh (exit status: 77)

SKIP: tests/factor/t27
======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-t27.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-t27.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-t27.sh.YFOv
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-t27.sh.YFOv
++++ ls -dgo /sources/coreutils-8.30/gt-t27.sh.YFOv
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-t27.sh.YFOv'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-t27.sh.YFOv
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-t27.sh.YFOv
++ cd /sources/coreutils-8.30/gt-t27.sh.YFOv
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ 't27.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' 't27.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
t27.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ printf '%s\n' 't27.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-t27.sh.YFOv
+ rm -rf /sources/coreutils-8.30/gt-t27.sh.YFOv
+ exit 77
SKIP tests/factor/t27.sh (exit status: 77)

SKIP: tests/factor/t28
======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-t28.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-t28.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-t28.sh.roxJ
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-t28.sh.roxJ
++++ ls -dgo /sources/coreutils-8.30/gt-t28.sh.roxJ
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-t28.sh.roxJ'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-t28.sh.roxJ
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-t28.sh.roxJ
++ cd /sources/coreutils-8.30/gt-t28.sh.roxJ
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ 't28.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' 't28.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
t28.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ sed 1q
+ printf '%s\n' 't28.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-t28.sh.roxJ
+ rm -rf /sources/coreutils-8.30/gt-t28.sh.roxJ
+ exit 77
SKIP tests/factor/t28.sh (exit status: 77)

SKIP: tests/factor/t29
======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-t29.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-t29.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-t29.sh.fJ6d
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-t29.sh.fJ6d
++++ ls -dgo /sources/coreutils-8.30/gt-t29.sh.fJ6d
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-t29.sh.fJ6d'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-t29.sh.fJ6d
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-t29.sh.fJ6d
++ cd /sources/coreutils-8.30/gt-t29.sh.fJ6d
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ 't29.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' 't29.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
t29.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ printf '%s\n' 't29.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-t29.sh.fJ6d
+ rm -rf /sources/coreutils-8.30/gt-t29.sh.fJ6d
+ exit 77
SKIP tests/factor/t29.sh (exit status: 77)

SKIP: tests/factor/t30
======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-t30.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-t30.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-t30.sh.B1GE
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-t30.sh.B1GE
++++ ls -dgo /sources/coreutils-8.30/gt-t30.sh.B1GE
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-t30.sh.B1GE'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-t30.sh.B1GE
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-t30.sh.B1GE
++ cd /sources/coreutils-8.30/gt-t30.sh.B1GE
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ 't30.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' 't30.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
t30.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ sed 1q
+ printf '%s\n' 't30.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-t30.sh.B1GE
+ rm -rf /sources/coreutils-8.30/gt-t30.sh.B1GE
+ exit 77
SKIP tests/factor/t30.sh (exit status: 77)

SKIP: tests/factor/t31
======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-t31.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-t31.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-t31.sh.Aujs
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-t31.sh.Aujs
++++ ls -dgo /sources/coreutils-8.30/gt-t31.sh.Aujs
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-t31.sh.Aujs'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-t31.sh.Aujs
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-t31.sh.Aujs
++ cd /sources/coreutils-8.30/gt-t31.sh.Aujs
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ 't31.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' 't31.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
t31.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ printf '%s\n' 't31.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-t31.sh.Aujs
+ rm -rf /sources/coreutils-8.30/gt-t31.sh.Aujs
+ exit 77
SKIP tests/factor/t31.sh (exit status: 77)

SKIP: tests/factor/t32
======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-t32.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-t32.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-t32.sh.VYVP
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-t32.sh.VYVP
++++ ls -dgo /sources/coreutils-8.30/gt-t32.sh.VYVP
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-t32.sh.VYVP'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-t32.sh.VYVP
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-t32.sh.VYVP
++ cd /sources/coreutils-8.30/gt-t32.sh.VYVP
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ 't32.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' 't32.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
t32.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ printf '%s\n' 't32.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
+ sed 1q
'
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-t32.sh.VYVP
+ rm -rf /sources/coreutils-8.30/gt-t32.sh.VYVP
+ exit 77
SKIP tests/factor/t32.sh (exit status: 77)

SKIP: tests/factor/t33
======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-t33.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-t33.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-t33.sh.lEge
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-t33.sh.lEge
++++ ls -dgo /sources/coreutils-8.30/gt-t33.sh.lEge
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-t33.sh.lEge'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-t33.sh.lEge
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-t33.sh.lEge
++ cd /sources/coreutils-8.30/gt-t33.sh.lEge
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ 't33.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' 't33.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
t33.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ sed 1q
+ printf '%s\n' 't33.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-t33.sh.lEge
+ rm -rf /sources/coreutils-8.30/gt-t33.sh.lEge
+ exit 77
SKIP tests/factor/t33.sh (exit status: 77)

SKIP: tests/factor/t34
======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-t34.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-t34.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-t34.sh.L2yW
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-t34.sh.L2yW
++++ ls -dgo /sources/coreutils-8.30/gt-t34.sh.L2yW
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-t34.sh.L2yW'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-t34.sh.L2yW
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-t34.sh.L2yW
++ cd /sources/coreutils-8.30/gt-t34.sh.L2yW
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ 't34.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' 't34.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
t34.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ sed 1q
+ printf '%s\n' 't34.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-t34.sh.L2yW
+ rm -rf /sources/coreutils-8.30/gt-t34.sh.L2yW
+ exit 77
SKIP tests/factor/t34.sh (exit status: 77)

SKIP: tests/factor/t35
======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-t35.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-t35.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-t35.sh.aY4v
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-t35.sh.aY4v
++++ ls -dgo /sources/coreutils-8.30/gt-t35.sh.aY4v
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-t35.sh.aY4v'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-t35.sh.aY4v
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-t35.sh.aY4v
++ cd /sources/coreutils-8.30/gt-t35.sh.aY4v
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ 't35.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' 't35.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
t35.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ printf '%s\n' 't35.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-t35.sh.aY4v
+ rm -rf /sources/coreutils-8.30/gt-t35.sh.aY4v
+ exit 77
SKIP tests/factor/t35.sh (exit status: 77)

SKIP: tests/factor/t36
======================

++ initial_cwd_=/sources/coreutils-8.30
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ /sources/coreutils-8.30 gt-t36.sh.XXXX
+++ case $# in
+++ destdir_=/sources/coreutils-8.30
+++ template_=gt-t36.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ destdir_slash_=/sources/coreutils-8.30/
+++ case $template_ in
++++ unset TMPDIR
+++ d=/sources/coreutils-8.30/gt-t36.sh.noZI
+++ case $d in
+++ :
+++ test -d /sources/coreutils-8.30/gt-t36.sh.noZI
++++ ls -dgo /sources/coreutils-8.30/gt-t36.sh.noZI
+++ perms='drwx------ 2 4096 Nov 26 23:50 /sources/coreutils-8.30/gt-t36.sh.noZI'
+++ case $perms in
+++ :
+++ echo /sources/coreutils-8.30/gt-t36.sh.noZI
+++ return
++ test_dir_=/sources/coreutils-8.30/gt-t36.sh.noZI
++ cd /sources/coreutils-8.30/gt-t36.sh.noZI
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_=/sources/coreutils-8.30/./src
+ case $abs_path_dir_ in
+ PATH=/sources/coreutils-8.30/./src:/sources/coreutils-8.30/src:/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin
+ create_exe_shims_ /sources/coreutils-8.30/./src
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ very_expensive_
+ test '' '!=' yes
+ skip_ 'very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ warn_ 't36.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ case $IFS in
+ printf '%s\n' 't36.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
t36.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive

+ test 9 = 2
+ printf '%s\n' 't36.sh: skipped test: very expensive: disabled by default
This test is very expensive, so it is disabled by default.
To run it anyway, rerun make check with the RUN_VERY_EXPENSIVE_TESTS
environment variable set to yes.  E.g.,

  env RUN_VERY_EXPENSIVE_TESTS=yes make check

or use the shortcut target of the toplevel Makefile,

  make check-very-expensive
'
+ sed 1q
+ Exit 77
+ set +e
+ exit 77
+ exit 77
+ remove_tmp_
+ __st=77
+ cleanup_
+ :
+ test '' = yes
+ cd /sources/coreutils-8.30
+ chmod -R u+rwx /sources/coreutils-8.30/gt-t36.sh.noZI
+ rm -rf /sources/coreutils-8.30/gt-t36.sh.noZI
+ exit 77
SKIP tests/factor/t36.sh (exit status: 77)

