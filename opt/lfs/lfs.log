[1;3;32m________________________________________________________________________________

    linux_api_headers (<0.1 SBU; 924 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    man-pages (<0.1 SBU; 28 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    glibc (24 SBU; 2.8 GB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    _lfs_basic_system_configure_glibc
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    zlib (<0.1 SBU; 4.4 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    file (0.1 SBU; 18 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    readline (0.1 SBU; 18 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # Reinstalling Readline will cause the old libraries to be moved to <libraryname>.old.
    # While this is normally not a problem, in some cases it can trigger a linking bug in ldconfig.
    # This can be avoided by issuing the following two seds:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # Now move the dynamic libraries to a more appropriate location and fix up some permissions and symbolic links:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # install the documentation:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    m4 (0.4 SBU; 33 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    First, make some fixes required by glibc-2.28:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make check
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    bc (0.1 SBU; 4.1 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # First, change an internal script to use sed instead of ed:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # Create temporary symbolic links so the package can find the readline library and confirm that its required libncurses library is available.
    # Even though the libraries are in /tools/lib at this point, the system will use /usr/lib at the end of this chapter.
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # Fix an issue in configure due to missing files in the early stages of LFS:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # To test bc, run the commands below.
    # There is quite a bit of output, so you may want to redirect it to a file.
    # There are a very small percentage of tests (10 of 12,144) that will indicate a round off error at the last digit.
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # now examin [0;36mtest_checklib.output
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    binutils (6.6 SBU; 4.9 GB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Verify that the PTYs are working properly inside the chroot environment by performing a simple test:
    
................................................................................[0m
[0;3;36m
    # This command should output the following.
[0;1;36m
    spawn ls
[0;3;35m
    # If, instead, the output includes the message below, then the environment is not set up for proper PTY operation.
    # This issue needs to be resolved before running the test suites for Binutils and GCC:
[0;1;35m
    The system has no more ptys.

    Ask your system administrator to create more.
    
[0m
[1;3;32m________________________________________________________________________________

    # The Binutils documentation recommends building Binutils in a dedicated build directory:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make check
    # [1;33mThe test suite for Binutils in this section is considered critical. Do not skip it under any circumstances.
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    gmp (1.3 SBU; 61 MB)
    
................................................................................[0m
[7;33mNote[0m[33m__________________________________________________[0m
[0;33m
    If you are building for 32-bit x86, but you have a CPU which is capable of running 64-bit code
    and you have specified CFLAGS in the environment, the configure script will attempt to configure for 64-bits and fail.
    Avoid this by invoking the configure command below with
[0;1;33m
    ABI=32 ./configure ...
    
[0m
[7;33mNote[0m[33m__________________________________________________[0m
[0;33m
    The default settings of GMP produce libraries optimized for the host processor.
    If libraries suitable for processors less capable than the host CPU are desired,
    generic libraries can be created by running the following:
[0;1;33m
    cp -v configfsf.guess config.guess

    cp -v configfsf.sub   config.sub
    
[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[7;31mImportant[0m[31m__________________________________________________[0m
[0;31m
    The test suite for GMP in this section is considered critical.
    Do not skip it under any circumstances.
    
[0;1;31m
[0m
[1;3;32m________________________________________________________________________________

    # make check
    
................................................................................[0m
[7;31mImportant[0m[31m__________________________________________________[0m
[0;31m
    The code in gmp is highly optimized for the processor where it is built.
    Occasionally, the code that detects the processor misidentifies the system capabilities
    and there will be errors in the tests or other applications using the gmp libraries with the message "Illegal instruction".
    In this case, gmp should be reconfigured with the option --build=x86_64-unknown-linux-gnu and rebuilt.
    
[0;1;31m
[0m
[1;3;32m________________________________________________________________________________

    Ensure that all 190 tests in the test suite passed. Check the results by issuing the following command:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    mpfr (1.1 SBU; 36 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make check
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    mpc (0.3 SBU; 22 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make check
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    shadow (0.2 SBU; 46 MB)
    
................................................................................[0m
[7;33mNote[0m[33m__________________________________________________[0m
[0;33m
    If you would like to enforce the use of strong passwords, refer to
    http://www.linuxfromscratch.org/blfs/view/8.3/postlfs/cracklib.html
    for installing CrackLib prior to building Shadow.
    Then add --with-libcrack to the configure command below.
    
[0;1;33m
[0m
[1;3;32m________________________________________________________________________________

    Disable the installation of the groups program and its man pages, as Coreutils provides a better version.
    Also Prevent the installation of manual pages that were already installed by the man pages package:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Instead of using the default crypt method, use the more secure SHA-512 method of password encryption,
    which also allows passwords longer than 8 characters.
    It is also necessary to change the obsolete /var/spool/mail location for user mailboxes
    that Shadow uses by default to the /var/mail location used currently:
    
................................................................................[0m
[7;33mNote[0m[33m__________________________________________________[0m
[0;33m
    If you chose to build Shadow with Cracklib support, run the following:
[0;1;33m
    sed -i 's@DICTPATH.*@DICTPATH	/lib/cracklib/pw_dict@' etc/login.defs
    
[0m
[1;3;32m________________________________________________________________________________

    Make a minor change to make the first group number generated by useradd 1000:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Prepare Shadow for compilation:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Move a misplaced program to its proper location:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    _lfs_basic_system_configure_shadow
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    This package contains utilities to add, modify, and delete users and groups;
    set and change their passwords; and perform other administrative tasks.
    For a full explanation of what password shadowing means, see the doc/HOWTO file within the unpacked source tree.
    If using Shadow support, keep in mind that programs which need to verify passwords
    (display managers, FTP programs, pop3 daemons, etc.) must be Shadow-compliant.
    That is, they need to be able to work with shadowed passwords.
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    enable shadowed passwords
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    enable shadowed group passwords
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Shadow's stock configuration for the useradd utility has a few caveats that need some explanation.

    - First, the default action for the useradd utility is to create the user and a group of the same name as the user.

      By default the user ID (UID) and group ID (GID) numbers will begin with 1000.

      This means if you dont pass parameters to useradd, each user will be a member of a unique group on the system.

    If this behavior is undesirable, youll need to pass the -g parameter to useradd.

    The default parameters are stored in the /etc/default/useradd file.

    You may need to modify two parameters in this file to suit your particular needs.

    

    
................................................................................[0m
[7;32m
    /etc/default/useradd[0m[32m__________________________________________________[0m
[0;32mParameter Explanations
[0;1;32m
    

    GROUP=1000

    ----------

    This parameter sets the beginning of the group numbers used in the /etc/group file.

    You can modify it to anything you desire.

    Note that useradd will never reuse a UID or GID.

    If the number identified in this parameter is used, it will use the next available number after this.

    Note also that if you dont have a group 1000 on your system the first time you use useradd without the -g parameter,

    youll get a message displayed on the terminal that says: useradd: unknown GID 1000.

    You may disregard this message and group number 1000 will be used.

    

    CREATE_MAIL_SPOOL=yes

    ---------------------

    This parameter causes useradd to create a mailbox file for the newly created user.

    useradd will make the group ownership of this file to the mail group with 0660 permissions.

    If you would prefer that these mailbox files are not created by useradd, issue the following command:

    
[0m
[1;3;32m________________________________________________________________________________

    # 6.20.3. Setting the root password
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    gcc (92 SBU; 4 GB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    If building on x86_64, change the default directory name for 64-bit libraries to “lib”:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Remove the symlink created earlier as the final gcc includes will be installed here:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    The GCC documentation recommends building GCC in a dedicated build directory:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Prepare GCC for compilation:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    compile
    
................................................................................[0m
[7;31mImportant[0m[31m__________________________________________________[0m
[0;31m
    In this section, the test suite for GCC is considered critical. Do not skip it under any circumstance.
    
[0;1;31m
[0m
[1;3;32m________________________________________________________________________________

    One set of tests in the GCC test suite is known to exhaust the stack, so increase the stack size prior to running the tests:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Remove one test known to cause a problem:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Test the results as a non-privileged user, but do not stop at errors:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    To receive a summary of the test suite results, run:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    For only the summaries, pipe the output through grep -A7 Summ.
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Results can be compared with those located at http://www.linuxfromscratch.org/lfs/build-logs/8.3/ and https://gcc.gnu.org/ml/gcc-testresults/.
    A few unexpected failures cannot always be avoided.
    The GCC developers are usually aware of these issues, but have not resolved them yet.
    Unless the test results are vastly different from those at the above URL, it is safe to continue.
    
................................................................................[0m
[7;33mNote[0m[33m__________________________________________________[0m
[0;33m
    On some combinations of kernel configuration and AMD processors there may be more than 1100 failures
    in the gcc.target/i386/mpx tests (which are designed to test the MPX option on recent Intel processors).
    These can safely be ignored on AMD processors.
    These tests will also fail on Intel processors if MPX support is not enabled in the kernel even though it is present on the CPU.
    
[0;1;33m
[0m
[1;3;32m________________________________________________________________________________

    make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Create a symlink required by the FHS for "historical" reasons.
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Many packages use the name cc to call the C compiler. To satisfy those packages, create a symlink:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Add a compatibility symlink to enable building programs with Link Time Optimization (LTO):
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Now that our final toolchain is in place, it is important to again ensure that compiling and linking will work as expected.
    We do this by performing the same sanity checks as we did earlier in the chapter:
    
................................................................................[0m
[0;3;36m
    There should be no errors, and the output of the last command will be (allowing for platform-specific differences in dynamic linker name):
[0;1;36m
    [Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]
    
[0;3;35m
[0;1;35m
[0m
[1;3;32m________________________________________________________________________________

    Now make sure that we're setup to use the correct start files:
    
................................................................................[0m
[0;3;36m
    The output of the last command should be:
[0;1;36m
    /usr/lib/gcc/x86_64-pc-linux-gnu/8.2.0/../../../../lib/crt1.o succeeded
    /usr/lib/gcc/x86_64-pc-linux-gnu/8.2.0/../../../../lib/crti.o succeeded
    /usr/lib/gcc/x86_64-pc-linux-gnu/8.2.0/../../../../lib/crtn.o succeeded
[0;3;35m
    Depending on your machine architecture, the above may differ slightly,
    the difference usually being the name of the directory after /usr/lib/gcc.
[0;1;35m
    The important thing to look for here is that gcc has found all three crt*.o files under the /usr/lib directory.
    
[0m
[1;3;32m________________________________________________________________________________

    Verify that the compiler is searching for the correct header files:
    
................................................................................[0m
[0;3;36m
    This command should return the following output:
[0;1;36m
    #include <...> search starts here:
     /usr/lib/gcc/x86_64-pc-linux-gnu/8.2.0/include
     /usr/local/include
     /usr/lib/gcc/x86_64-pc-linux-gnu/8.2.0/include-fixed
     /usr/include
[0;3;35m
    Again, note that the directory named after your target triplet may be different than the above, depending on your architecture.
    
[0;1;35m
[0m
[1;3;32m________________________________________________________________________________

    Next, verify that the new linker is being used with the correct search paths:
    
................................................................................[0m
[0;3;36m
    References to paths that have components with -linux-gnu should be ignored, but otherwise the output of the last command should be:
[0;1;36m
    SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib64")
    SEARCH_DIR("/usr/local/lib64")
    SEARCH_DIR("/lib64")
    SEARCH_DIR("/usr/lib64")
    SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib")
    SEARCH_DIR("/usr/local/lib")
    SEARCH_DIR("/lib")
    SEARCH_DIR("/usr/lib");
[0;3;35m
    A 32-bit system may see a few different directories. For example, here is the output from an i686 machine:
[0;1;35m
    SEARCH_DIR("/usr/i686-pc-linux-gnu/lib32")
    SEARCH_DIR("/usr/local/lib32")
    SEARCH_DIR("/lib32")
    SEARCH_DIR("/usr/lib32")
    SEARCH_DIR("/usr/i686-pc-linux-gnu/lib")
    SEARCH_DIR("/usr/local/lib")
    SEARCH_DIR("/lib")
    SEARCH_DIR("/usr/lib");
    
[0m
[1;3;32m________________________________________________________________________________

    Next make sure that we're using the correct libc:
    
................................................................................[0m
[0;3;36m
    The output of the last command should be:
[0;1;36m
    attempt to open /lib/libc.so.6 succeeded
    
[0;3;35m
[0;1;35m
[0m
[1;3;32m________________________________________________________________________________

    Lastly, make sure GCC is using the correct dynamic linker:
    
................................................................................[0m
[0;3;36m
    The output of the last command should be (allowing for platform-specific differences in dynamic linker name): 
[0;1;36m
    found ld-linux-x86-64.so.2 at /lib/ld-linux-x86-64.so.2 
[0;3;35m
    If the output does not appear as shown above or is not received at all, then something is seriously wrong.
    Investigate and retrace the steps to find out where the problem is and correct it.
    The most likely reason is that something went wrong with the specs file adjustment.
    Any issues will need to be resolved before continuing with the process.
    
[0;1;35m
[0m
[1;3;32m________________________________________________________________________________

    Once everything is working correctly, clean up the test files:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Finally, move a misplaced file:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    bzip2 (<0.1 SBU; 2.3 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Apply a patch that will install the documentation for this package:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    The following command ensures installation of symbolic links are relative:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Ensure the man pages are installed into the correct location:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Prepare Bzip2 for compilation with:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Compile and test the package:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Install the programs:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Install the shared bzip2 binary into the /bin directory, make some necessary symbolic links, and clean up:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    pkg-config (0.4 SBU; 30 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make check
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    ncurses (0.4 SBU; 42 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Don't install a static library that is not handled by configure:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Move the shared libraries to the /lib directory, where they are expected to reside:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Because the libraries have been moved, one symlink points to a non-existent file. Recreate it:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Many applications still expect the linker to be able to find non-wide-character Ncurses libraries.
    Trick such applications into linking with wide-character libraries by means of symlinks and linker scripts:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Finally, make sure that old applications that look for -lcurses at build time are still buildable:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    If desired, install the Ncurses documentation:
    
................................................................................[0m
[7;33mNote[0m[33m__________________________________________________[0m
[0;33m
    The instructions above don't create non-wide-character Ncurses libraries since no package installed
    by compiling from sources would link against them at runtime.
    However, the only known binary-only applications that link against non-wide-character Ncurses libraries require version 5.
    If you must have such libraries because of some binary-only application or to be compliant with LSB,
    build the package again with the following commands:
[0;1;33m
    make distclean
    ./configure --prefix=/usr    \
                --with-shared    \
                --without-normal \
                --without-debug  \
                --without-cxx-binding \
                --with-abi-version=5
    make sources libs
    cp -av lib/lib*.so.5* /usr/lib
    
[0m
[1;3;32m________________________________________________________________________________

    attr (<0.1 SBU; 4.2 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make check
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    The shared library needs to be moved to /lib, and as a result the .so
    file in /usr/lib will need to be recreated:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    acl (<0.1 SBU; 6.4 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    The shared library needs to be moved to /lib, and as a result the .so
    file in /usr/lib will need to be recreated:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    libcap (<0.1 SBU; 1.4 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Prevent a static library from being installed:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    This package does not come with a test suite.
    Install the package:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    The shared library needs to be moved to /lib, and as a result the .so
    file in /usr/lib will need to be recreated:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    sed (0.5 SBU; 30 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    First fix an issue in the LFS environment and remove a failing test:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Prepare Sed for compilation:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make check
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    psmisc (<0.1 SBU; 4.3 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Finally, move the killall and fuser programs to the location specified by the FHS:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    iana-etc (<0.1 SBU; 2.3 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    The following command converts the raw data provided by IANA into the correct formats
    for the /etc/protocols and /etc/services data files:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    bison (0.3 SBU; 35 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[7;33mNote[0m[33m__________________________________________________[0m
[0;33m
    There is a circular dependency between bison and flex with regard to the checks.
    If desired, after installing flex in the next section, the bison can be rebuilt
    and the bison checks can be run with make check.
    
[0;1;33m
[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    flex (0.4 SBU; 35 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    First, fix a problem introduced with glibc-2.26:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    The build procedure assumes the help2man program is available to create a man page from the executable --help option.
    This is not present, so we use an environment variable to skip this process. Now, prepare Flex for compilation:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make check
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    A few programs do not know about flex yet and try to run its predecessor, lex.
    To support those programs, create a symbolic link named lex that runs flex in lex emulation mode:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    grep (0.4 SBU; 31 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make check
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    bash (2.1 SBU; 58 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    To prepare the tests, ensure that the nobody user can write to the sources tree:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Now, run the tests as the nobody user:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Run the newly compiled bash program (replacing the one that is currently being executed):
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    libtool (1.9 SBU; 43 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    The test time for libtool can be reduced significantly on a system with multiple cores.
    To do this, append TESTSUITEFLAGS=-j<N> to the line below.
    For instance, using -j4 can reduce the test time by over 60 percent.
    
................................................................................[0m
[7;33mNote[0m[33m__________________________________________________[0m
[0;33m
    Five tests are known to fail in the LFS build environment due to a circular dependency,
    but all tests pass if rechecked after automake is installed.
    
[0;1;33m
[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    gdbm (0.1 SBU; 11 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make check
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    gperf (<0.1 SBU; 6.3 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    The tests are known to fail if running multiple simultaneous tests (-j option greater than 1).
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    expat (0.1 SBU; 11 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    First fix a problem with the regression tests in the LFS environment:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make check
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    install the documentation:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    inetutils (0.4 SBU; 29 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make check
    
................................................................................[0m
[7;33mNote[0m[33m__________________________________________________[0m
[0;33m
    One test, libls.sh, may fail in the initial chroot environment but will pass if the test is rerun after the LFS system is complete.
    One test, ping-localhost.sh, will fail if the host system does not have ipv6 capability.
    
[0;1;33m
[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Move some programs so they are available if /usr is not accessible:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    perl (9.1 SBU; 274 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    First create a basic /etc/hosts file to be referenced in one of Perl's configuration files as well as the optional test suite:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    This version of Perl now builds the Compress::Raw::Zlib and Compress::Raw::BZip2 modules.
    By default Perl will use an internal copy of the sources for the build.
    Issue the following command so that Perl will use the libraries installed on the system:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    To have full control over the way Perl is set up, you can remove the “-des” options from the following command and hand-pick the way this package is built.
    Alternatively, use the command exactly as below to use the defaults that Perl auto-detects:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make check
    
................................................................................[0m
[7;33mNote[0m[33m__________________________________________________[0m
[0;33m
    One test fails due to using the most recent version of gdbm.
    
[0;1;33m
[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    XML-Parser (<0.1 SBU; 2.1 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    perl Makefile.PL
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make test
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    intltool (<0.1 SBU; 1.5 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    First fix a warning that is caused by perl-5.22 and later:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make check
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    autoconf (3.5 SBU; 17.3 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make check
    several tests are skipped that use Automake.
    For full test coverage, Autoconf can be re-tested after Automake has been installed.
    In addition, two tests fail due to changes in libtool-2.4.3 and later.
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    automake (8.9 SBU; 107 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make check
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    xz (0.2 SBU; 16 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make check
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    kmod25 (0.1 SBU; 13 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    This package does not come with a test suite that can be run in the LFS chroot environment.
    At a minimum the git program is required and several tests will not run outside of a git repository.
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Install the package, and create symlinks for compatibility with Module-Init-Tools (the package that previously handled Linux kernel modules):
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    gettext (2.6 SBU; 210 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    First, suppress two invocations of test-lock which on some machines can loop forever:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Now fix a configuration file:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make check
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    libelf (1 SBU; 91 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make check
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Install only Libelf:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    libffi (0.4 SBU; 7.6 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Modify the Makefile to install headers into the standard /usr/include directory instead of /usr/lib/libffi-3.2.1/include.
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make check
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    openssl (1.7 SBU; 75 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make test
    One subtest in the test 40-test_rehash.t fails in the lfs chroot environment, but passes when run as a regular user.
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    install the documentation:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    python (1.3 SBU; 390 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[7;33mNote[0m[33m__________________________________________________[0m
[0;33m
    The test suite requires TK and and X Windows session and cannot be run until Python 3 is reinstalled in BLFS.
    
[0;1;33m
[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    install the preformatted documentation:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    ninja (0.2 SBU; 83 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    When run, ninja normally runs a maximum number of processes in parallel.
    By default this is the number of cores on the system plus two.
    In some cases this can overheat a CPU or run a system out of memory.
    If run from the command line, passing a -jN parameter will limit the number of parallel processes,
    but some packages embed the execution of ninja and do not pass a -j parameter.
    Using the optional patch below allows a user to limit the number of parallel processes via an environment variable, NINJAJOBS. For example setting:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    If desired, install the patch by running:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Build Ninja with:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    To test the results, issue:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    meson (<0.1 SBU; 21 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Compile Meson
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    systemd (1.1 SBU; 297 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Create a symlink to work around missing xsltproc:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Set up the man pages:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Remove tests that cannot be built in chroot:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Apply a patch to fix a build failure with glibc-2.28:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Remove an unneeded group, render, from the default udev rules:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    [2018-11-24] otherwise there is error:
    systemd error: result of ‘1 << 31’ requires 33 bits to represent, but ‘int’ only has 32 bits [-Werror=shift-overflow=]
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Prepare systemd for compilation:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Compile the package:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Install the package:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Remove an unnecessary directory:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Create the /etc/machine-id file needed by systemd-journald:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Create the /lib/systemd/systemd-user-sessions script to allow unprivileged user logins without systemd-logind:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    procps-ng (0.1 SBU; 17 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    The test suite needs some custom modifications for LFS.
    Remove a test that fails when scripting does not use a tty device and fix two others.
    To run the test suite, run the following commands:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Finally, move essential libraries to a location that can be found if /usr is not mounted.
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    e2fsprogs (1.6 SBU; 96 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    The E2fsprogs documentation recommends that the package be built in a subdirectory of the source tree:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    To set up and run the test suite we need to first link some libraries from /tools/lib to a location where the test programs look.
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Install the static libraries and headers:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Make the installed static libraries writable so debugging symbols can be removed later:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    This package installs a gzipped .info file but doesnt update the system-wide dir file. Unzip this file and then update the system dir file using the following commands:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    If desired, create and install some additional documentation by issuing the following commands:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    coreutils (3.3 SBU; 190 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    POSIX requires that programs from Coreutils recognize character boundaries correctly even in multibyte locales.
    The following patch fixes this non-compliance and other internationalization-related bugs.
    
................................................................................[0m
[7;33mNote[0m[33m__________________________________________________[0m
[0;33m
    In the past, many bugs were found in this patch.
    When reporting new bugs to Coreutils maintainers, please check first if they are reproducible without this patch.
    
[0;1;33m
[0m
[1;3;32m________________________________________________________________________________

    Suppress a test which on some machines can loop forever:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Now the test suite is ready to be run. First, run the tests that are meant to be run as user root:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    We are going to run the remainder of the tests as the nobody user.
    Certain tests, however, require that the user be a member of more than one group.
    So that these tests are not skipped well add a temporary group and make the user nobody a part of it:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Fix some of the permissions so that the non-root user can compile and run the tests:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Now run the tests. Make sure the PATH in the su environment includes /tools/bin.
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    The test program test-getlogin is known to fail in a partially built system environment like the chroot environment here,
    but passes if run at the end of this chapter. The test program tty.sh is also known to fail.
    Remove the temporary group:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Move programs to the locations specified by the FHS:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Some packages in BLFS and beyond expect the following programs in /bin, so make sure they are placed there:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    check (3.8 SBU; 12 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make check
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    diffutils (0.4 SBU; 33 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make check
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    gawk (0.4 SBU; 44 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    First, ensure some unneeded files are not installed:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make check
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    install the documentation:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    findutils (0.7 SBU; 51 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    First, suppress a test which on some machines can loop forever:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Next, make some fixes required by glibc-2.28:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make check
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Some packages in BLFS and beyond expect the find program in /bin, so make sure its placed there:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    groff (0.5 SBU; 90 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Groff expects the environment variable PAGE to contain the default paper size.
    For users in the United States, PAGE=letter is appropriate. Elsewhere, PAGE=A4 may be more suitable.
    While the default paper size is configured during compilation,
    it can be overridden later by echoing either “A4” or “letter” to the /etc/papersize file.
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    This package does not support parallel build. Compile the package:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    grub (0.8 SBU; 147 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    less (<0.1 SBU; 3.9 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    gzip (0.1 SBU; 20 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    First, make some fixes required by glibc-2.28:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make check
    Two tests are known to fail in the LFS environment: help-version and zmore.
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Move a program that needs to be on the root filesystem:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    iproute2 (0.2 SBU; 13 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    The arpd program included in this package will not be built since it is dependent on Berkeley DB, which is not installed in LFS.
    However, a directory for arpd and a man page will still be installed.
    Prevent this by running the commands below.
    If the arpd binary is needed, instructions for compiling Berkeley DB can be found in the BLFS Book at
    http://www.linuxfromscratch.org/blfs/view/8.3/server/databases.html#db.
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    It is also necessary to disable building two modules that requires http://www.linuxfromscratch.org/blfs/view/8.3/postlfs/iptables.html.
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    kbd (0.1 SBU; 30 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    The behaviour of the Backspace and Delete keys is not consistent across the keymaps in the Kbd package.
    The following patch fixes this issue for i386 keymaps:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    After patching, the Backspace key generates the character with code 127, and the Delete key generates a well-known escape sequence.
    Remove the redundant resizecons program (it requires the defunct svgalib to provide
    the video mode files - for normal use setfont sizes the console appropriately) together with its manpage.
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make check
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[7;33mNote[0m[33m__________________________________________________[0m
[0;33m
    For some languages (e.g., Belarusian) the Kbd package doesnt provide a useful keymap where
    the stock “by” keymap assumes the ISO-8859-5 encoding, and the CP1251 keymap is normally used.
    Users of such languages have to download working keymaps separately.
    
[0;1;33m
[0m
[1;3;32m________________________________________________________________________________

    install the documentation:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    libpipeline (0.1 SBU; 8.2 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make check
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    make (0.6 SBU; 13 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Again, work around an error caused by glibc-2.27:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    The test suite needs to know where supporting perl files are located.
    We use an environment variable to accomplish this. To test the results, issue:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    patch (0.2 SBU; 13 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make check
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    dbus (0.2 SBU; 18 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    This package does come with a test suite, but it requires several packages that are not included in LFS.
    Instructions for running the test suite can be found in the BLFS book at
    http://www.linuxfromscratch.org/blfs/view/8.3/general/dbus.html.
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    The shared library needs to be moved to /lib, and as a result the .so file in /usr/lib will need to be recreated:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Create a symlink, so that D-Bus and systemd can use the same machine-id file:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    util-linux (1.1 SBU; 200 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    The FHS recommends using the /var/lib/hwclock directory instead of the usual /etc directory as the location for the adjtime file.
    First create a directory to enable storage for the hwclock program:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Remove the earlier created symlinks:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    If desired, run the test suite as a non-root user:
    
................................................................................[0m
[7;33mNote[0m[33m__________________________________________________[0m
[0;33m
    Running the test suite as the root user can be harmful to your system.
    To run it, the CONFIG_SCSI_DEBUG option for the kernel must be available in the currently running system, and must be built as a module.
    Building it into the kernel will prevent booting.
    For complete coverage, other BLFS packages must be installed.
    If desired, this test can be run after rebooting into the completed LFS system and running:
    
[0;1;33m
    bash tests/run.sh --srcdir=$PWD --builddir=$PWD

    
[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    man-db (0.2 SBU; 33 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make check
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    tar (2.8 SBU; 44 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make check
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    texinfo (1.1 SBU; 129 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Fix a file that creates a lot of failures in the regression checks:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make check
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Optionally, install the components belonging in a TeX installation:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    The Info documentation system uses a plain text file to hold its list of menu entries.
    The file is located at /usr/share/info/dir.
    Unfortunately, due to occasional problems in the Makefiles of various packages,
    it can sometimes get out of sync with the info pages installed on the system.
    If the /usr/share/info/dir file ever needs to be recreated, the following optional commands will accomplish the task:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    vim (1.6 SBU; 169 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    First, change the default location of the vimrc configuration file to /etc:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make test
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    The test suite outputs a lot of binary data to the screen.
    This can cause issues with the settings of the current terminal.
    The problem can be avoided by redirecting the output to a log file as shown above.
    A successful test will result in the words "ALL DONE" in the log file at completion.
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Many users are used to using vi instead of vim.
    To allow execution of vim when users habitually enter vi,
    create a symlink for both the binary and the man page in the provided languages:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    By default, Vim documentation is installed in /usr/share/vim.
    The following symlink allows the documentation to be accessed via /usr/share/doc/vim-8.1,
    making it consistent with the location of documentation for other packages:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    If an X Window System is going to be installed on the LFS system, it may be necessary to recompile Vim after installing X.
    Vim comes with a GUI version of the editor that requires X and some additional libraries to be installed.
    For more information on this process, refer to the Vim documentation and the Vim installation page in the BLFS book at
    http://www.linuxfromscratch.org/blfs/view/8.3/postlfs/vim.html.
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    By default, vim runs in vi-incompatible mode.
    This may be new to users who have used other editors in the past.
    The “nocompatible” setting is included below to highlight the fact that a new behavior is being used.
    It also reminds those who would change to “compatible” mode that it should be the first setting in the configuration file.
    This is necessary because it changes other settings, and overrides must come after this setting.
    Create a default vim configuration file by running the following:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Documentation for other available options can be obtained by running the following command:
    
................................................................................[0m
[7;33mNote[0m[33m__________________________________________________[0m
[0;33m
    By default, Vim only installs spell files for the English language.
    To install spell files for your preferred language, download the *.spl and optionally,
    the *.sug files for your language and character encoding from
    ftp://ftp.vim.org/pub/vim/runtime/spell/ and save them to /usr/share/vim/vim81/spell/.

    

    To use these spell files, some configuration in /etc/vimrc is needed, e.g.:

    

    set spelllang=en,ru

    set spell

    

    For more information, see the appropriate README file located at the URL above.

    
[0;1;33m
[0m
[1;3;32m________________________________________________________________________________

    autoconf (3.5 SBU; 17.3 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make check
    several tests are skipped that use Automake.
    For full test coverage, Autoconf can be re-tested after Automake has been installed.
    In addition, two tests fail due to changes in libtool-2.4.3 and later.
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    libtool (1.9 SBU; 43 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    The test time for libtool can be reduced significantly on a system with multiple cores.
    To do this, append TESTSUITEFLAGS=-j<N> to the line below.
    For instance, using -j4 can reduce the test time by over 60 percent.
    
................................................................................[0m
[7;33mNote[0m[33m__________________________________________________[0m
[0;33m
    Five tests are known to fail in the LFS build environment due to a circular dependency,
    but all tests pass if rechecked after automake is installed.
    
[0;1;33m
[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    autoconf (3.5 SBU; 17.3 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make check
    several tests are skipped that use Automake.
    For full test coverage, Autoconf can be re-tested after Automake has been installed.
    In addition, two tests fail due to changes in libtool-2.4.3 and later.
    
................................................................................[0m
[7;33mNote[0m[33m__________________________________________________[0m
[0;33m
    several tests are skipped that use Automake.
    For full test coverage, Autoconf can be re-tested after Automake has been installed.
[0;1;33m
    In addition, two tests fail due to changes in libtool-2.4.3 and later.
    
[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    automake (8.9 SBU; 107 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make check
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    autoconf (3.5 SBU; 17.3 MB)
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # configure
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    # make check
    several tests are skipped that use Automake.
    For full test coverage, Autoconf can be re-tested after Automake has been installed.
    In addition, two tests fail due to changes in libtool-2.4.3 and later.
    
................................................................................[0m
[7;33mNote[0m[33m__________________________________________________[0m
[0;33m
    several tests are skipped that use Automake.
    For full test coverage, Autoconf can be re-tested after Automake has been installed.
[0;1;33m
    In addition, two tests fail due to changes in libtool-2.4.3 and later.
    
[0m
[1;3;32m________________________________________________________________________________

    # make install
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    The reason for this is that the programs in /tools are no longer needed.
    For this reason you can delete the /tools directory if so desired.
    
................................................................................[0m
[7;33mNote[0m[33m__________________________________________________[0m
[0;33m
    Removing /tools will also remove the temporary copies of Tcl, Expect, and DejaGNU which were used for running the toolchain tests.
    If you need these programs later on, they will need to be recompiled and re-installed.
    The BLFS book has instructions for this (see http://www.linuxfromscratch.org/blfs/).
    
[0;1;33m
[0m
[1;3;32m________________________________________________________________________________

    If the virtual kernel file systems have been unmounted, either manually or through a reboot,
    ensure that the virtual kernel file systems are mounted when reentering the chroot.
    This process was explained in
    Section 6.2.2, “Mounting and Populating /dev” and
    Section 6.2.3, “Mounting Virtual Kernel File Systems”.
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    There were several static libraries that were not suppressed earlier in the chapter
    in order to satisfy the regression tests in several packages.
    These libraries are from binutils, bzip2, e2fsprogs, flex, libtool, and zlib.
    If desired, remove them now:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    There are also several files installed in the /usr/lib and /usr/libexec directories with a file name extention of .la.
    These are "libtool archive" files and generally unneeded on a linux system.
    None of these are necessary at this point. To remove them, run:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    For more information about libtool archive files, see the BLFS section "About Libtool Archive (.la) files".
    
................................................................................[0m
[7;34m
    # 7.2.1. Network Interface Configuration Files
    [0m[34m__________________________________________________[0m
[0;34m
    # Starting with version 209, systemd ships a network configuration daemon called systemd-networkd for basic network configuration.
    #                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~        ^^^^^^^^^^^^^^^^
    # Additionally, since version 213, DNS name resolution can be handled by systemd-resolved in place of a static /etc/resolv.conf file.
    #                                  ~~~~~~~~~~~~~~~~~~~                   ^^^^^^^^^^^^^^^^                      ................
    # Both services are enabled by default.
    #
    # Configuration files for
    #                         systemd-networkd (and systemd-resolved)
    # can be placed in
    #                         /usr/lib/systemd/network (higher priority) or /etc/systemd/network.
    #
    # There are three types of configuration files:
    #     .link       see systemd-link(5)
    #     .netdev     see systemd-netdev(5)
    #     .network    see systemd-network(5)
    
[0m
[7;34m
    7.2.1.1. Network Device Naming
    [0m[34m__________________________________________________[0m
[0;34m
    Udev normally assigns network card interface names based on system physical characteristics such as enp2s1.
    If you are not sure what your interface name is, you can always run ip link after you have booted your system.

    For most systems, there is only one network interface for each type of connection.
    For example, the classic interface name for a wired connection is eth0.
    A wireless connection will usually have the name [1;32mwifi0 [0;37mor [1;32mwlan0[0;37m.
    
[0m
[7;34m
    7.2.1.2. Static IP Configuration
    [0m[34m__________________________________________________[0m
[0;34m
    The command below creates a basic configuration file for a Static IP setup (using both systemd-networkd and systemd-resolved):
    [36m
    cat > /etc/systemd/network/10-eth-static.network << "EOF"
    [Match]
    Name=<network-device-name>

    [Network]
    Address=192.168.0.2/24
    Gateway=192.168.0.1
    DNS=192.168.0.1
    Domains=<Your Domain Name>
    EOF
    [0m[1;33m
    Multiple DNS entries can be added if you have more than one DNS server.
    Do not include DNS or Domains entries if you intend to use a static /etc/resolv.conf file.
    
[0m
[7;34m
    7.2.1.3. DHCP Configuration[0m[34m__________________________________________________[0m
[0;34m
    The command below creates a basic configuration file for an IPv4 DHCP setup:
    
[0m
[7;34m
    DNS[0m[34m__________________________________________________[0m
[0;34m
    7.2.2. /etc/resolv.conf

    IP addresses of the DNS servers are placed in /etc/resolv.conf
    
[0m
[7;33mNote[0m[33m__________________________________________________[0m
[0;33m
    when not to use /etc/resolv.conf
[0;1;33m
    If using another means to configure your network interfaces (ex: ppp, network-manager, etc.),
    or if using any type of local resolver (ex: bind, dnsmasq, etc.),
    or any other software that generates an /etc/resolv.conf (ex: resolvconf),
    the systemd-resolved service should not be used.
    
[0m
[7;34m
    7.2.2.1. resolv.conf generated by systemd-resolved
    [0m[34m__________________________________________________[0m
[0;34m
    When using systemd-resolved for DNS configuration, it creates the file
    [1;33m/run/systemd/resolve/resolv.conf[0;37m.
    [32m
    Create a symlink in /etc to use the generated file:
    [1;32m
    ln -sfv /run/systemd/resolve/resolv.conf /etc/resolv.conf
    
[0m
[7;34m
    7.2.2.2. Static resolv.conf
    [0m[34m__________________________________________________[0m
[0;34m
    If a static /etc/resolv.conf is desired, create it by running the following command:
    [1;32m
    cat > /etc/resolv.conf << "EOF"
    # Begin /etc/resolv.conf

    domain <Your Domain Name>
    nameserver <IP address of your primary nameserver>
    nameserver <IP address of your secondary nameserver>

    # End /etc/resolv.conf
    EOF
    [0;33m
    The domain statement can be omitted or replaced with a search statement.
    See the man page for resolv.conf for more details.

    The IP address may also be a router on the local network.
    
[0m
[7;33mNote[0m[33m__________________________________________________[0m
[0;33m
    The Google Public IPv4 DNS addresses are
[0;1;33m
    8.8.8.8 and 8.8.4.4 for IPv4, and
    2001:4860:4860::8888 and 2001:4860:4860::8844 for IPv6.
    
[0m
[7;33mNote[0m[33m__________________________________________________[0m
[0;33m
    7.2.3. Configuring the system hostname
    
[0;1;33m
    During the boot process, the file /etc/hostname is used for establishing the system s hostname.
    
[0m
[1;3;32m________________________________________________________________________________

    Create the /etc/hostname file and enter a hostname by running:
    
................................................................................[0m
[7;33mNote[0m[33m__________________________________________________[0m
[0;33m
    echo "<lfs>" > /etc/hostname 
[0;1;33m
    <lfs> needs to be replaced with the name given to the computer.

    Do not enter the FQDN here. That information is put in the /etc/hosts file.
    
[0m
[1;3;32m________________________________________________________________________________

    7.2.4. Customizing the /etc/hosts File
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    The ::1 entry is the IPv6 counterpart of 127.0.0.1 and represents the IPv6 loopback interface.
    127.0.1.1 is a loopback entry reserved specifically for the FQDN.

    If using a static address, create the /etc/hosts file by running this command instead:

    [1;33m
    cat > /etc/hosts << "EOF"
    # Begin /etc/hosts

    127.0.0.1 localhost
    127.0.1.1 <FQDN> <HOSTNAME>
    <192.168.0.2> <FQDN> <HOSTNAME> [alias1] [alias2] ...
    ::1       localhost ip6-localhost ip6-loopback
    ff02::1   ip6-allnodes
    ff02::2   ip6-allrouters

    # End /etc/hosts
    EOF
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    The <192.168.0.2>, <FQDN>, and <HOSTNAME> values need to be changed for specific uses or requirements
    (if assigned an IP address by a network/system administrator and the machine will be connected to an existing network).
    The optional alias name(s) can be omitted.
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    7.5. Configuring the system clock

    This section discusses how to configure the systemd-timedated system service, which configures system clock and timezone.
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    If you cannot remember whether or not the hardware clock is set to UTC, find out by running the hwclock --localtime --show command.
    This will display what the current time is according to the hardware clock.
    If this time matches whatever your watch says, then the hardware clock is set to local time.
    If the output from hwclock is not local time, chances are it is set to UTC time.
    Verify this by adding or subtracting the proper amount of hours for the timezone to the time shown by hwclock.
    For example, if you are currently in the MST timezone, which is also known as GMT -0700, add seven hours to the local time.
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    systemd-timedated reads /etc/adjtime, and depending on the contents of the file, it sets the clock to either UTC or local time.

    Create the /etc/adjtime file with the following contents if your hardware clock is set to local time:

    cat > /etc/adjtime << "EOF"
    0.0 0 0.0
    0
    LOCAL
    EOF
    If /etc/adjtime isnt present at first boot,
    systemd-timedated will assume that hardware clock is set to UTC and adjust the file according to that.

    You can also use the timedatectl utility to tell systemd-timedated if your hardware clock is set to UTC or local time:

    timedatectl set-local-rtc 1
    timedatectl can also be used to change system time and time zone.

    To change your current system time, issue:

    timedatectl set-time YYYY-MM-DD HH:MM:SS
    Hardware clock will also be updated accordingly.

    To change your current time zone, issue:

    timedatectl set-timezone TIMEZONE
    You can get a list of available time zones by running:

    timedatectl list-timezones
    Note
    Please note that the timedatectl command can be used only on a system booted with systemd.

    7.5.1. Network Time Synchronization
    Starting with version 213, systemd ships a daemon called systemd-timesyncd
    which can be used to synchronize the system time with remote NTP servers.

    The daemon is not intended as a replacement for the well established NTP daemon,
    but as a client only implementation of the SNTP protocol
    which can be used for less advanced tasks and on resource limited systems.

    Starting with systemd version 216, the systemd-timesyncd daemon is enabled by default.
    If you want to disable it, issue the following command:

    systemctl disable systemd-timesyncd
    The /etc/systemd/timesyncd.conf file can be used to change the NTP servers that systemd-timesyncd synchronizes with.

    Please note that when system clock is set to Local Time, systemd-timesyncd wont update hardware clock.
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    7.6. Configuring the Linux Console
    This section discusses how to configure the systemd-vconsole-setup system service,
    which configures the virtual console font and console keymap.

    The systemd-vconsole-setup service reads the /etc/vconsole.conf file for configuration information.
    Decide which keymap and screen font will be used.
    Various language-specific HOWTOs can also help with this, see http://www.tldp.org/HOWTO/HOWTO-INDEX/other-lang.html.
    Examine localectl list-keymaps output for a list of valid console keymaps.
    Look in /usr/share/consolefonts directory for valid screen fonts.

    The /etc/vconsole.conf file should contain lines of the form: VARIABLE="value". The following variables are recognized:

    KEYMAP
    This variable specifies the key mapping table for the keyboard. If unset, it defaults to us.

    KEYMAP_TOGGLE
    This variable can be used to configure a second toggle keymap and is unset by default.

    FONT
    This variable specifies the font used by the virtual console.

    FONT_MAP
    This variable specifies the console map to be used.

    FONT_UNIMAP
    This variable specifies the Unicode font map.

    An example for a German keyboard and console is given below:

    cat > /etc/vconsole.conf << "EOF"
    KEYMAP=de-latin1
    FONT=Lat2-Terminus16
    EOF
    You can change KEYMAP value at runtime by using the localectl utility:

    localectl set-keymap MAP
    Note
    Please note that the localectl command can be used only on a system booted with systemd.

    You can also use localectl utility with the corresponding parameters to change X11 keyboard layout, model, variant and options:

    localectl set-x11-keymap LAYOUT [MODEL] [VARIANT] [OPTIONS]
    To list possible values for localectl set-x11-keymap parameters, run localectl with parameters listed below:

    list-x11-keymap-models
    Show known X11 keyboard mapping models.

    list-x11-keymap-layouts
    Show known X11 keyboard mapping layouts.

    list-x11-keymap-variants
    Show known X11 keyboard mapping variants.

    list-x11-keymap-options
    Show known X11 keyboard mapping options.

    Note
    Using any of the parameters listed above requires the XKeyboard Config package from BLFS.
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    7.8. Creating the /etc/inputrc File

    The inputrc file is the configuration file for the Readline library,
    which provides editing capabilities while the user is entering a line from the terminal.
    It works by tranlating keyboard inputs into specific actions.
    Readline is used by Bash and most other shells as well as many other applications.

    Most people do not need user-specific functionality so the command below
    creates a global /etc/inputrc used by everyone who logs in.
    If you later decide you need to override the defaults on a per-user basis,
    you can create a .inputrc file in the user s home directory with the modified mappings.

    For more information on how to edit the inputrc file,
    see info bash under the Readline Init File section.
    info readline is also a good source of information.

    Below is a generic global inputrc along with comments to explain what the various options do.
    Note that comments cannot be on the same line as commands.
    Create the file using the following command:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    7.9. Creating the /etc/shells File

    The shells file contains a list of login shells on the system.
    Applications use this file to determine whether a shell is valid.
    For each shell a single line should be present, consisting of the shell s path,
    relative to the root of the directory structure (/).

    For example, this file is consulted by chsh to determine whether an
    unprivileged user may change the login shell for her own account.
    If the command name is not listed, the user will be denied of change.

    It is a requirement for applications such as GDM which does not populate the face browser
    if it cant find /etc/shells, or FTP daemons which traditionally disallow access to users
    with shells not included in this file.
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    7.10. Systemd Usage and Configuration

    7.10.1. Basic Configuration

    The /etc/systemd/system.conf file contains a set of options to control basic systemd operations.
    The default file has all entries commented out with the default settings indicated.
    This file is where the log level may be changed as well as some basic logging settings.

    [0;32mSee the [0;1;32msystemd-system.conf(5)[0;32m manual page for details on each configuration option.
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    7.10.2. Disabling Screen Clearing at Boot Time

    The normal behavior for systemd is to clear the screen at the end of the boot sequence.
    If desired, this behavior may be changed by running the following command:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    The boot messages can always be reviewed by using the journalctl -b command as the root user.

    7.10.3. Disabling tmpfs for /tmp
    By default, /tmp is created as a tmpfs. If this is not desired, it can be overridden by the following:
    [1;33m
    ln -sfv /dev/null /etc/systemd/system/tmp.mount
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Alternatively, if a a separate partition for /tmp is desired, specify that partition in an /etc/fstab entry.
    
................................................................................[0m
[7;33mNote[0m[33m__________________________________________________[0m
[0;33m
    Warning
[0;1;33m
    Do not create the symbolic link above if a separate partition is used for /tmp.
    This will prvent the root file system (/) from being remounted r/w and make the system unusable when booted.
    
[0m
[1;3;32m________________________________________________________________________________

    7.10.4. Configuring Automatic File Creation and Deletion

    There are several services that create or delete files or directories:

    * systemd-tmpfiles-clean.service
    * systemd-tmpfiles-setup-dev.service
    * systemd-tmpfiles-setup.service

    The system location for the configuration files is /usr/lib/tmpfiles.d/*.conf.
    The local configuration files are in /etc/tmpfiles.d.
    Files in /etc/tmpfiles.d override files with the same name in /usr/lib/tmpfiles.d.
    See tmpfiles.d(5) manual page for file format details.

    Note that the syntax for the /usr/lib/tmpfiles.d/*.conf files can be confusing.
    For example, the default deletion of files in the /tmp directory is located in /usr/lib/tmpfiles.d/tmp.conf with the line:
    [1;33m
    q /tmp 1777 root root 10d
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    The type field, q, discusses creating a subvolume with quotas which is really only applicable to btrfs filesystems.
    It references type v which in turn references type d (directory).
    This then creates the specified directory if is is not present and adjusts the permissions and ownership as specified.
    Contents of the directory will be subject to time based cleanup if the age argument is specified.

    If the default parameters are not desired, then the file should be copied to /etc/tmpfiles.d and edited as desired.
    For example:
    [1;33m
    mkdir -p /etc/tempfiles.d
    cp /usr/lib/tmpfiles.d/tmp.conf /etc/tempfiles.d
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    7.10.5. Overriding Default Services Behavior

    The parameter of a unit can be overriden by creating a directory and a configuration file in /etc/systemd/system.
    For example:
    [1;33m
    mkdir -pv /etc/systemd/system/foobar.service.d

    cat > /etc/systemd/system/foobar.service.d/foobar.conf << EOF
    [Service]
    Restart=always
    RestartSec=30
    EOF
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    See systemd.unit(5) manual page for more information.
    After creating the configuration file, run
        systemctl daemon-reload
    and
        systemctl restart foobar
    to activate the changes to a service.

    7.10.6. Debugging the Boot Sequence

    Rather than plain shell scripts used in SysVinit or BSD style init systems,
    systemd uses a unified format for different types of startup files (or units).
    The command systemctl is used to enable, disable, control state, and obtain status of unit files.
    Here are some examples of frequently used commands:

    * systemctl list-units -t <service> [--all]: lists loaded unit files of type service.
    * systemctl list-units -t <target> [--all]: lists loaded unit files of type target.
    * systemctl show -p Wants <multi-user.target>: shows all units that depend on the multi-user target.
      Targets are special unit files that are anogalous to runlevels under SysVinit.
    * systemctl status <servicename.service>: shows the status of the servicename service.
      The .service extension can be omitted if there are no other unit files with the same name,
      such as .socket files (which create a listening socket that provides similar functionality to inetd/xinetd).

    7.10.7. Working with the Systemd Journal

    Logging on a system booted with systemd is handled with systemd-journald (by default),
    rather than a typical unix syslog daemon.
    You can also add a normal syslog daemon and have both work side by side if desired.
    The systemd-journald program stores journal entries in a binary format rather than a plain text log file.
    To assist with parsing the file, the command journalctl is provided. Here are some examples of frequently used commands:

    * journalctl -r: shows all contents of the journal in reverse chronological order.
    * journalctl -u UNIT: shows the journal entries associated with the specified UNIT file.
    * journalctl -b[=ID] -r: shows the journal entries since last successful boot (or for boot ID) in reverse chronological order.
    * journalctl -f: povides functionality similar to tail -f (follow).

    7.10.8. Long Running Processes

    Beginning with systemd-230, all user processes are killed when a user session is ended,
    even if nohup is used, or the process uses the daemon() or setsid() functions.
    This is a deliberate change from a historically permissive environment to a more restrictive one.
    The new behavior may cause issues if you depend on long running programs (e.g., screen or tmux)
    to remain active after ending your user session.
    There are three ways to enable lingering processes to remain after a user session is ended.

    * Enable process lingering for only selected users:
      Normal users have permission to enable process lingering with the command loginctl enable-linger for their own user.
      System administrators can use the same command with a user argument to enable for a user.
      That user can then use the systemd-run command to start long running processes.
      For example: systemd-run --scope --user /usr/bin/screen.
      If you enable lingering for your user, the user@.service will remain even after all login sessions are closed,
      and will automatically start at system boot. This has the advantage of explicitly allowing
      and disallowing processes to run after the user session has ended,
      but breaks backwards compatibility with tools like nohup and utilities that use deamon().

    * Enable system-wide process lingering:
      You can set KillUserProcesses=no in /etc/logind.conf to enable process lingering globally for all users.
      This has the benefit of leaving the old method available to all users at the expense of explicit control.

    * Disable at build-time:
      You can enable lingering by default while building systemd by adding
      the switch --without-kill-user-processes to the configure command for systemd.
      This completely disables the ability of systemd to kill user processes at session end.
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    The /etc/fstab file is used by some programs to determine where file systems are to be mounted by default,
    in which order, and which must be checked (for integrity errors) prior to mounting.
    Create a new file systems:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    8.3. Linux-4.18.5 (4.4-66 (typically~6) SBU; 960-4250 (typically~1100) MB)

    8.3.1. Installation of the kernel

    Building the kernel involves a few steps—configuration, compilation, and installation.
    Read the README file in the kernel source tree for alternative methods to the way this book configures the kernel.

    Prepare for compilation by running the following command:

    make mrproper

    This ensures that the kernel tree is absolutely clean.
    The kernel team recommends that this command be issued prior to each kernel compilation.
    Do not rely on the source tree being clean after un-tarring.

    Configure the kernel via a menu-driven interface.
    For general information on kernel configuration see
    http://www.linuxfromscratch.org/hints/downloads/files/kernel-configuration.txt.
    BLFS has some information regarding particular kernel configuration requirements of packages outside of LFS
    at http://www.linuxfromscratch.org/blfs/view/8.3/longindex.html#kernel-config-index.
    Additional information about configuring and building the kernel can be found at http://www.kroah.com/lkn/
    
................................................................................[0m
[7;33mNote[0m[33m__________________________________________________[0m
[0;33m
    A good starting place for setting up the kernel configuration is to run make defconfig.
    This will set the base configuration to a good state that takes your current system architecture into account.

    Be sure to enable/disable/set the following features or the system might not work correctly or boot at all:
    
[0;1;33m
    General setup -->
       [ ] Enable deprecated sysfs features to support old userspace tools [CONFIG_SYSFS_DEPRECATED]
       [ ] Enable deprecated sysfs features by default [CONFIG_SYSFS_DEPRECATED_V2]
       [*] open by fhandle syscalls [CONFIG_FHANDLE]
       [ ] Auditing support [CONFIG_AUDIT]
       [*] Control Group support [CONFIG_CGROUPS]
    Processor type and features  --->
       [*] Enable seccomp to safely compute untrusted bytecode [CONFIG_SECCOMP]
    Networking support  --->
      Networking options  --->
       <*> The IPv6 protocol [CONFIG_IPV6]
    Device Drivers  --->
      Generic Driver Options  --->
       [ ] Support for uevent helper [CONFIG_UEVENT_HELPER]
       [*] Maintain a devtmpfs filesystem to mount at /dev [CONFIG_DEVTMPFS]
       [ ] Fallback user-helper invocation for firmware loading [CONFIG_FW_LOADER_USER_HELPER]
    Firmware Drivers  --->
       [*] Export DMI identification via sysfs to userspace [CONFIG_DMIID]
    File systems  --->
       [*] Inotify support for userspace [CONFIG_INOTIFY_USER]
       <*> Kernel automounter version 4 support (also supports v3) [CONFIG_AUTOFS4_FS]
      Pseudo filesystems  --->
       [*] Tmpfs POSIX Access Control Lists [CONFIG_TMPFS_POSIX_ACL]
       [*] Tmpfs extended attributes [CONFIG_TMPFS_XATTR]
    Kernel hacking  --->
           Choose kernel unwinder (Frame pointer unwinder)  ---> [CONFIG_UNWINDER_FRAME_POINTER]
    
[0m
[7;33mNote[0m[33m__________________________________________________[0m
[0;33m
    While "The IPv6 Protocol" is not strictly required,
[0;1;33m
    it is highly recommended by the systemd developers.
    
[0m
[7;33mNote[0m[33m__________________________________________________[0m
[0;33m
    If your host hardware is using UEFI, then the make defconfig above should automatically add in some EFI-related kernel options.

    In order to allow your LFS kernel to be booted from within your host s UEFI boot environment,
    your kernel must have this option selected
    (A fuller description of managing UEFI environments from within LFS is covered by the lfs-uefi.txt hint
     at http://www.linuxfromscratch.org/hints/downloads/files/lfs-uefi.txt):
    
[0;1;33m
    Processor type and features  --->
       [*]   EFI stub support  [CONFIG_EFI_STUB]
    
[0m
[1;3;32m________________________________________________________________________________

    8.3. Linux-4.18.5 (4.4-66 (typically~6) SBU; 960-4250 (typically~1100) MB)

    8.3.1. Installation of the kernel

    Building the kernel involves a few steps—configuration, compilation, and installation.
    Read the README file in the kernel source tree for alternative methods to the way this book configures the kernel.

    Prepare for compilation by running the following command:

    make mrproper

    This ensures that the kernel tree is absolutely clean.
    The kernel team recommends that this command be issued prior to each kernel compilation.
    Do not rely on the source tree being clean after un-tarring.

    Configure the kernel via a menu-driven interface.
    For general information on kernel configuration see
    http://www.linuxfromscratch.org/hints/downloads/files/kernel-configuration.txt.
    BLFS has some information regarding particular kernel configuration requirements of packages outside of LFS
    at http://www.linuxfromscratch.org/blfs/view/8.3/longindex.html#kernel-config-index.
    Additional information about configuring and building the kernel can be found at http://www.kroah.com/lkn/
    
................................................................................[0m
[7;33mNote[0m[33m__________________________________________________[0m
[0;33m
    A good starting place for setting up the kernel configuration is to run make defconfig.
    This will set the base configuration to a good state that takes your current system architecture into account.

    Be sure to enable/disable/set the following features or the system might not work correctly or boot at all:
    
[0;1;33m
    General setup -->
       [ ] Enable deprecated sysfs features to support old userspace tools [CONFIG_SYSFS_DEPRECATED]
       [ ] Enable deprecated sysfs features by default [CONFIG_SYSFS_DEPRECATED_V2]
       [*] open by fhandle syscalls [CONFIG_FHANDLE]
       [ ] Auditing support [CONFIG_AUDIT]
       [*] Control Group support [CONFIG_CGROUPS]
    Processor type and features  --->
       [*] Enable seccomp to safely compute untrusted bytecode [CONFIG_SECCOMP]
    Networking support  --->
      Networking options  --->
       <*> The IPv6 protocol [CONFIG_IPV6]
    Device Drivers  --->
      Generic Driver Options  --->
       [ ] Support for uevent helper [CONFIG_UEVENT_HELPER]
       [*] Maintain a devtmpfs filesystem to mount at /dev [CONFIG_DEVTMPFS]
       [ ] Fallback user-helper invocation for firmware loading [CONFIG_FW_LOADER_USER_HELPER]
    Firmware Drivers  --->
       [*] Export DMI identification via sysfs to userspace [CONFIG_DMIID]
    File systems  --->
       [*] Inotify support for userspace [CONFIG_INOTIFY_USER]
       <*> Kernel automounter version 4 support (also supports v3) [CONFIG_AUTOFS4_FS]
      Pseudo filesystems  --->
       [*] Tmpfs POSIX Access Control Lists [CONFIG_TMPFS_POSIX_ACL]
       [*] Tmpfs extended attributes [CONFIG_TMPFS_XATTR]
    Kernel hacking  --->
           Choose kernel unwinder (Frame pointer unwinder)  ---> [CONFIG_UNWINDER_FRAME_POINTER]
    
[0m
[7;33mNote[0m[33m__________________________________________________[0m
[0;33m
    While "The IPv6 Protocol" is not strictly required,
[0;1;33m
    it is highly recommended by the systemd developers.
    
[0m
[7;33mNote[0m[33m__________________________________________________[0m
[0;33m
    If your host hardware is using UEFI, then the make defconfig above should automatically add in some EFI-related kernel options.

    In order to allow your LFS kernel to be booted from within your host s UEFI boot environment,
    your kernel must have this option selected
    (A fuller description of managing UEFI environments from within LFS is covered by the lfs-uefi.txt hint
     at http://www.linuxfromscratch.org/hints/downloads/files/lfs-uefi.txt):
    
[0;1;33m
    Processor type and features  --->
       [*]   EFI stub support  [CONFIG_EFI_STUB]
    
[0m
[1;3;32m________________________________________________________________________________

    grep --color -E '(CONFIG_SYSFS_DEPRECATED|CONFIG_SYSFS_DEPRECATED_V2|CONFIG_AUDIT|CONFIG_UEVENT_HELPER|CONFIG_FW_LOADER_USER_HELPER)\>' .config
    these should be disabled:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    grep --color -E '(CONFIG_SYSFS_DEPRECATED|CONFIG_SYSFS_DEPRECATED_V2|CONFIG_AUDIT|CONFIG_UEVENT_HELPER|CONFIG_FW_LOADER_USER_HELPER)' .config
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    grep --color -E '(CONFIG_FHANDLE|CONFIG_CGROUPS|CONFIG_SECCOMP|CONFIG_IPV6|CONFIG_DEVTMPFS|CONFIG_DMIID|CONFIG_INOTIFY_USER|CONFIG_AUTOFS4_FS|CONFIG_TMPFS_POSIX_ACL|CONFIG_TMPFS_XATTR|CONFIG_UNWINDER_FRAME_POINTER)\>' .config
    these should be enabled:
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    grep --color -E '(CONFIG_SYSFS_DEPRECATED|CONFIG_SYSFS_DEPRECATED_V2|CONFIG_AUDIT|CONFIG_UEVENT_HELPER|CONFIG_FW_LOADER_USER_HELPER)\>' .config
    these should be disabled:
................................................................................[0m
[1;3;32m________________________________________________________________________________

    grep --color -E '(CONFIG_SYSFS_DEPRECATED|CONFIG_SYSFS_DEPRECATED_V2|CONFIG_AUDIT|CONFIG_UEVENT_HELPER|CONFIG_FW_LOADER_USER_HELPER)' .config
    disabled:
................................................................................[0m
[1;3;32m________________________________________________________________________________

    grep --color -E '(CONFIG_FHANDLE|CONFIG_CGROUPS|CONFIG_SECCOMP|CONFIG_IPV6|CONFIG_DEVTMPFS|CONFIG_DMIID|CONFIG_INOTIFY_USER|CONFIG_AUTOFS4_FS|CONFIG_TMPFS_POSIX_ACL|CONFIG_TMPFS_XATTR|CONFIG_UNWINDER_FRAME_POINTER)\>' .config
    these should be enabled:
................................................................................[0m
[1;3;32m________________________________________________________________________________

    After kernel compilation is complete, additional steps are required to complete the installation.
    Some files need to be copied to the /boot directory.
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    The path to the kernel image may vary depending on the platform being used.
    The filename below can be changed to suit your taste, but the stem of the filename
    should be vmlinuz to be compatible with the automatic setup of the boot process described in the next section.
    The following command assumes an x86 architecture:
    cp -iv arch/x86/boot/bzImage /boot/vmlinuz-4.18.5-lfs-8.3-systemd
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    System.map is a symbol file for the kernel.
    It maps the function entry points of every function in the kernel API,
    as well as the addresses of the kernel data structures for the running kernel.
    It is used as a resource when investigating kernel problems. Issue the following command to install the map file:
    cp -iv System.map /boot/System.map-4.18.5
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    The kernel configuration file .config produced by the make menuconfig step above contains
    all the configuration selections for the kernel that was just compiled.
    It is a good idea to keep this file for future reference:

    cp -iv .config /boot/config-4.18.5
    
................................................................................[0m
[1;3;32m________________________________________________________________________________

    Install the documentation for the Linux kernel:
    install -d /usr/share/doc/linux-4.18.5
    cp -r Documentation/* /usr/share/doc/linux-4.18.5
    
................................................................................[0m
[7;33mNote[0m[33m__________________________________________________[0m
[0;33m
    It is important to note that the files in the kernel source directory are not owned by root.
    Whenever a package is unpacked as user root (like we did inside chroot),
    the files have the user and group IDs of whatever they were on the packager s computer.
    This is usually not a problem for any other package to be installed because the source tree is removed after the installation.
    However, the Linux source tree is often retained for a long time.
    Because of this, there is a chance that whatever user ID the packager used will be assigned to somebody on the machine.
    That person would then have write access to the kernel source.

    In many cases, the configuration of the kernel will need to be updated for packages that will be installed later in BLFS.
    Unlike other packages, it is not necessary to remove the kernel source tree after the newly built kernel is installed.

    If the kernel source tree is going to be retained, run
        chown -R 0:0
    on the linux-4.18.5 directory to ensure all files are owned by user root.
    
[0;1;33m
[0m
[1;3;32m________________________________________________________________________________

    [0;35mSome kernel documentation recommends creating a symlink from /usr/src/linux pointing to the kernel source directory.
    This is specific to kernels prior to the 2.6 series and [1;31mmust not[0;35m be created on an LFS system
    as it can cause problems for packages you may wish to build once your base LFS system is complete.
    
................................................................................[0m
[7;33mNote[0m[33m__________________________________________________[0m
[0;33m
    The headers in the system s include directory (/usr/include) should always be the ones against which Glibc was compiled,
    that is, the sanitised headers installed in Section 6.7, “Linux-4.18.5 API Headers”.
    Therefore, they should never be replaced by either the raw kernel headers or any other kernel sanitized headers.
    
[0;1;33m
[0m
